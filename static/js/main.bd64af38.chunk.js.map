{"version":3,"sources":["definitions/enums.tsx","models/TestCase.tsx","models/RGB.tsx","definitions/constants.tsx","models/SingleTest.tsx","models/GroupTest.tsx","definitions/utils.tsx","utils/LocalStorage.tsx","models/Card.tsx","components/GroupTestComponent.tsx","components/SingleTestComponent.tsx","components/SingleTestComponentVerbose.tsx","components/TestComponent.tsx","components/TrashcanComponent.tsx","utils/useLocalStorage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TestType","GroupType","CompareType","MatchType","TestCase","id","testType","hits","tries","parentId","deck","allTests","result","this","runTest","toFixed","tests","map","t","clone","RGB","red","green","blue","another","percent","COLOR_ZERO","COLOR_HUND","HandlersContext","React","createContext","onChangeTestTurn","turn","onChangeGroupName","name","onChangeGroupType","group","onChangeSingleTarget","target","match","onChangeSingleCompare","compare","onChangeSingleCompareTarget","onChangeSingleAmount","amount","onDragDrop","draggedTestId","droppedOnTestId","checkCanDrop","SingleTest","Single","Name","compareCards","GT","compareTarget","EQ","Object","assign","str","LT","testVal","hand","slice","matches","targetN","Number","parseInt","selectorS","c","comparerS","s","selectorN","NaN","comparerN","n","CMC","cmc","CardType","cardType","Power","power","Toughness","toughness","includes","NE","filter","length","GroupTest","Group","groupType","ALL","TestSuite","undefined","childrenResults","getChildren","IsTrue","ANY","some","r","every","myChildren","grandChildren","flatMap","ch","getAllDescendants","Tests2JSON","JSON","stringify","LocalStorage","key","content","localStorage","setItem","serializaer","serialized","Save","window","getItem","deserializer","json","Load","error","console","log","Card","cardSet","cardNumber","oracleText","manaCost","cardStr","trim","cardRegEx","m","copies","card","replace","deckString","split","parseLine","Array","fill","Promise","resolve","reject","cacheCard","LoadT","getLSKey","fromJSON","scryfall","then","res","newCard","set","toUpperCase","collector_number","type_line","mana_cost","oracle_text","SaveT","toJSON","err","deckStr","cards","_","uniqBy","parseDeck","all","fetchCardInfo","fakeCard","parse","realCard","GroupTestComponent","props","context","useContext","useDrag","item","type","test","collect","monitor","isDragging","dragRef","dragPreview","useDrop","accept","drop","didDrop","canDrop","mon","isOver","shallow","dropRef","className","ref","readOnly","value","getPercent","style","backgroundColor","interpolateWith","toCSS","onChange","e","placeholder","disabled","sort","a","b","ct","SingleTestComponent","opts_cardNames","val","text","opts_cardTypes","uniq","w","opts_CMC","opts_Power","opts_Toughness","selectedValue","mType","defaultChecked","label","SingleTestComponentVerbose","useState","selectedMatch","setMatch","selectedTarget","setTarget","useEffect","toString","validOptions","targetCompareOptions","i","o","TestComponent","innerWidth","TrashcanComponent","dropHandler","useLocalStorage","initialValue","storedValue","setStoredValue","valueToStore","defaultTests","parent","App","persistedDeck","persistDeck","persistedTests","persistTests","stateDeck","setDeck","prefetchCards","async","prefetchDeck","setCards","stateCards","pt","newTest","stateTests","setTests","numOfRuns","setRuns","saved","setSaved","debouncedPrefetch","useConstant","AwesomeDebouncePromise","debouncedPrefetchAsync","useAsync","updateTest","transform","updateSingleTest","updateGroupTest","draggedTest","find","droppedOnTest","parentTest","d","handlers","draggedTestParent","prevTests","newGroup","Math","max","handleClickRun","runSimAsync","execute","start","Date","newTests","rootTests","shuffled","shuffle","forEach","end","getTime","onClick","loading","DndProvider","backend","MultiBackend","options","HTML5toTouch","deletedTest","allChildrenIDs","allDeletedIDs","Provider","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd64af38.chunk.js","sourcesContent":["\r\nexport enum TestType { Single, Group }\r\n\r\nexport enum GroupType { ALL = \"and\", ANY = \"or\" }\r\n\r\nexport enum CompareType { GT = \">\", EQ = \"=\", LT = \"<\", NE = \"<>\" }\r\n\r\nexport enum MatchType { Name = \"Name\", CardType = \"CardType\", CMC = \"CMC\", Power = \"Power\", Toughness = \"Toughness\" }","import { TestType } from '../definitions/enums';\r\nimport { Card } from \"./Card\";\r\n\r\nexport abstract class TestCase {\r\n  public hits: number = 0;\r\n  public tries: number = 0;\r\n  public parentId?: number;\r\n  constructor(public readonly id: number, public readonly testType: TestType) {\r\n  }\r\n  protected abstract runTest(deck: ReadonlyArray<Card>, allTests:ReadonlyArray<TestCase>): boolean;\r\n  public IsTrue(deck: ReadonlyArray<Card>, allTests:ReadonlyArray<TestCase>): boolean {\r\n    let result = this.runTest(deck, allTests);\r\n    // console.log(\"Test ID\",this.id,\"is at\",this.hits,\"/\",this.tries)\r\n    if (result)\r\n      this.hits++;\r\n    this.tries++;\r\n    // console.log(\"Test ID\",this.id,\"is at\",this.hits,\"/\",this.tries)\r\n    return result;\r\n  }\r\n  public getPercent(): string {\r\n    if(this.tries > 0)\r\n        return (100 * this.hits / this.tries).toFixed(1);\r\n    else\r\n        return \"??\"\r\n  }\r\n  abstract clone():TestCase;\r\n  \r\n  public static clone(tests:ReadonlyArray<TestCase>):Array<TestCase>\r\n  {\r\n      let clones = tests.map(t => t.clone())\r\n      return clones;\r\n  }\r\n}","export class RGB {\r\n  constructor(public red: number, public green: number, public blue: number) { }\r\n  public interpolateWith(another: RGB, percent: number) {\r\n    //making percent from 0 to 1 if it's > 1\r\n    if (percent > 1)\r\n      percent /= 100;\r\n    let resultRed = this.red + percent * (another.red - this.red);\r\n    let resultGreen = this.green + percent * (another.green - this.green);\r\n    let resultBlue = this.blue + percent * (another.blue - this.blue);\r\n    return new RGB(resultRed, resultGreen, resultBlue);\r\n  }\r\n  public toCSS() {\r\n    return `rgb(${this.red},${this.green},${this.blue})`;\r\n  }\r\n}\r\n","import { RGB } from \"../models/RGB\";\r\nimport React from \"react\";\r\nimport { CompareType, GroupType, MatchType } from \"./enums\";\r\n\r\nexport const INITIAL_DRAW: number = 6;\r\nexport const TOTAL_RUNS: number = 9999;\r\n\r\nexport const COLOR_ZERO = new RGB(255, 0, 0)\r\nexport const COLOR_HUND = new RGB(0, 255, 0)\r\n\r\nexport const HandlersContext = React.createContext({\r\n    onChangeTestTurn:(id:number,turn:number) => {},\r\n    onChangeGroupName:(id:number,name:string) => {},\r\n    onChangeGroupType:(id:number,group:GroupType) => {},\r\n    onChangeSingleTarget:(id:number,target:string, match?:MatchType) => {},\r\n    onChangeSingleCompare:(id:number,compare:CompareType) => {},\r\n    onChangeSingleCompareTarget:(id:number,compare:CompareType) => {},\r\n    onChangeSingleAmount:(id:number,amount:number) => {},\r\n    onDragDrop:(draggedTestId:number,droppedOnTestId:number) => {},\r\n    checkCanDrop:(draggedTestId:number,droppedOnTestId:number):boolean => true\r\n  })","import {TestCase} from '../models/TestCase';\r\nimport { Card } from './Card';\r\nimport { MatchType, CompareType, TestType } from '../definitions/enums';\r\nimport {INITIAL_DRAW} from '../definitions/constants'\r\nexport class SingleTest extends TestCase {\r\n    \r\n  public turn: number = 1;\r\n  public match: MatchType = MatchType.Name;\r\n  public compareCards: CompareType = CompareType.GT;\r\n  public compareTarget: CompareType = CompareType.EQ;\r\n  public amount: number = 1;\r\n  constructor(readonly id: number, public target: string) {\r\n    super(id, TestType.Single);\r\n  }\r\n  clone(): TestCase {\r\n    let clone = new SingleTest(this.id, this.target)\r\n    Object.assign(clone,this)\r\n    return clone;\r\n  }\r\n  public toString() {\r\n    let str:string = \"Draw \"\r\n    switch (this.compareCards) {\r\n      case CompareType.EQ:\r\n        str += \"exactly\"\r\n        break;\r\n      case CompareType.GT:\r\n        str += \"at least\"\r\n        break;\r\n      case CompareType.LT:\r\n        str += \"at most\"\r\n        break;\r\n    }\r\n\r\n    str += \" \" + this.amount + \" cards with \" + this.match + \" \" + this.compareTarget + \" \" + this.target\r\n    str += \" by turn \" + this.turn\r\n\r\n    return str;\r\n  }\r\n  protected runTest(deck: Array<Card>): boolean {\r\n    //let result = 10 * Math.random() > this.id\r\n    // console.log(\"Single ID\",this.id,result)\r\n    let hand = deck.slice(0, INITIAL_DRAW + this.turn);\r\n    let result: boolean = false;\r\n    let matches: number = 0;\r\n    let targetN = Number.parseInt(this.target)\r\n\r\n    let selectorS:(c:Card)=>string = (c) => \"\";\r\n    let comparerS:(s:string)=>Boolean = (s) => false\r\n    let selectorN:(c:Card)=>number = (c) => NaN;\r\n    let comparerN:(n:number)=>Boolean = (n) => false\r\n    let testVal:\"string\"|\"number\"\r\n\r\n    switch (this.match) {\r\n      case MatchType.Name:\r\n        selectorS = (c:Card)=> c.name\r\n        testVal = \"string\"\r\n        break;\r\n      case MatchType.CMC:\r\n        selectorN = (c:Card) => c.cmc\r\n        testVal = \"number\"\r\n        break;\r\n      case MatchType.CardType:\r\n        selectorS = (c:Card)=> c.cardType\r\n        testVal = \"string\"\r\n        break;\r\n      case MatchType.Power:\r\n        selectorN = (c:Card) => c.power\r\n        testVal = \"number\"\r\n        break;\r\n      case MatchType.Toughness:\r\n        selectorN = (c:Card) => c.toughness\r\n        testVal = \"number\"\r\n        break;\r\n    }\r\n\r\n    switch (this.compareTarget) {\r\n      case CompareType.EQ:\r\n        comparerS = (s:string) => s.includes(this.target)\r\n        comparerN = (n:number) => n === targetN\r\n      break;\r\n      case CompareType.NE:\r\n        comparerS = (s:string) => !s.includes(this.target)\r\n        comparerN = (n:number) => n !== targetN\r\n      break;\r\n      case CompareType.GT:\r\n        comparerN = (n:number) => n >= targetN\r\n      break;\r\n      case CompareType.LT:\r\n        comparerN = (n:number) => n <= targetN\r\n      break;\r\n    }\r\n\r\n    if(testVal === \"number\")\r\n    {\r\n      matches = hand.map(selectorN).filter(comparerN).length;\r\n    }\r\n    else if(testVal === \"string\")\r\n    {\r\n      matches = hand.map(selectorS).filter(comparerS).length;\r\n    }\r\n\r\n    switch (this.compareCards) {\r\n      case CompareType.EQ:\r\n        result = matches === this.amount;\r\n        break;\r\n      case CompareType.GT:\r\n        result = matches >= this.amount;\r\n        break;\r\n      case CompareType.LT:\r\n        result = matches <= this.amount;\r\n        break;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {TestCase} from '../models/TestCase';\r\nimport { Card } from './Card';\r\nimport { GroupType, TestType } from '../definitions/enums';\r\n///Idea: The Group test could also have a target amount & comparison type, so you can check that out of your sub-tests, you get >0, exactly 1, >1, etc.\r\nexport class GroupTest extends TestCase {\r\n//   public getChildren: Array<TestCase> = [];\r\n  public groupType: GroupType = GroupType.ALL;\r\n  public name?: string;\r\n  constructor(readonly id: number) {\r\n    super(id, TestType.Group);\r\n  }\r\n  clone(): TestCase {\r\n      let clone = new GroupTest(this.id)\r\n      clone.parentId = this.parentId\r\n//   clone.children = this.children.map(c => c.clone())\r\n      clone.groupType = this.groupType\r\n      clone.name = this.name\r\n      return clone\r\n  }\r\n  public getChildren(TestSuite:Array<TestCase>):Array<TestCase> {\r\n    return TestSuite.filter(t => t.parentId === this.id);\r\n  }\r\n\r\n  public toString() {\r\n    if (this.name !== undefined) {\r\n      return `${this.name} [${this.groupType}]`;\r\n    }\r\n    else {\r\n      return `Group ${this.id} [${this.groupType}]`;\r\n    }\r\n  }\r\n  protected runTest(deck: Array<Card>, allTests:Array<TestCase>): boolean {\r\n    let childrenResults = this.getChildren(allTests).map(c => c.IsTrue(deck, allTests));\r\n    var result: boolean;\r\n    if (this.groupType === GroupType.ANY) {\r\n      result = childrenResults.some(r => r);\r\n    }\r\n    else {\r\n      result = childrenResults.every(r => r);\r\n    }\r\n    // console.log(\"Group ID\",this.id,result)\r\n    return result;\r\n  }\r\n\r\n  public getAllDescendants(TestSuite:Array<TestCase>): Array<TestCase> {\r\n    const myChildren = this.getChildren(TestSuite);\r\n    const groupChildren = myChildren.flatMap(c => {\r\n        if(c instanceof GroupTest)\r\n            return [c as GroupTest]\r\n        else return []\r\n    })\r\n    const grandChildren = groupChildren.flatMap(ch => ch.getAllDescendants(TestSuite))\r\n\r\n    return [...myChildren,...grandChildren]\r\n  } \r\n}\r\n","import { TestCase } from \"../models/TestCase\";\r\nimport { SingleTest } from \"../models/SingleTest\";\r\nimport { TestType } from \"./enums\";\r\nimport { GroupTest } from \"../models/GroupTest\";\r\n\r\nexport function Tests2JSON(tests:Array<TestCase>):string\r\n  {\r\n    return JSON.stringify(tests)\r\n  }\r\n\r\nexport function JSON2Tests(json:string):Array<TestCase>\r\n  {\r\n      //JSON.parse returns _objects_ with the same properties as the classes we want\r\n      //So we need to transform those objets to actual class instances\r\n      let pseudoTests:Array<TestCase> = JSON.parse(json);\r\n      let realTests:Array<TestCase> = pseudoTests.flatMap(pt => {\r\n          let newTest:TestCase\r\n          if(pt.testType === TestType.Single) {\r\n              newTest = new SingleTest(pt.id,\"\")\r\n          } else if (pt.testType === TestType.Group) {\r\n              newTest = new GroupTest(pt.id)\r\n          } else {\r\n              return []\r\n          }\r\n\r\n          Object.assign(newTest,pt)\r\n          return [newTest];\r\n      })\r\n      \r\n    return realTests\r\n  }","export abstract class LocalStorage \r\n{\r\n    //TODO: Save(string,ISerializable)\r\n    //TODO: Save(string,T => string)\r\n    //reverse for load\r\n\r\n    public static Save(key:string, content:string):void\r\n    {\r\n        localStorage.setItem(key, content);\r\n    }\r\n\r\n    public static SaveT<T>(key:string, content:T, serializaer:(o:T)=>string):void\r\n    {\r\n        const serialized:string = serializaer(content);\r\n        LocalStorage.Save(key,serialized)\r\n    }\r\n\r\n    public static Load(key:string):string|null\r\n    {\r\n        return window.localStorage.getItem(key);\r\n    }\r\n\r\n    public static LoadT<T>(key:string, deserializer:(o:string)=>T):T|null\r\n    {\r\n        const json = LocalStorage.Load(key);\r\n        if(json === null) return null;\r\n        try {\r\n            const parsed:T = deserializer(json);\r\n            return parsed;\r\n        } catch(error) {\r\n            console.log(error);\r\n            return null;\r\n        }\r\n    }\r\n}","import _ from \"lodash\";\r\nimport * as scryfall  from \"scryfall\";\r\nimport { LocalStorage } from \"../utils/LocalStorage\";\r\n\r\nexport class Card {\r\n  /* parsed from arena export */\r\n  public cardSet?:string\r\n  public cardNumber?:number\r\n\r\n  /* Scryfall data */\r\n  public cmc:number = Number.NaN;\r\n  public cardType:string = \"\";\r\n  public power:number = Number.NaN;\r\n  public toughness:number = Number.NaN;\r\n  public oracleText:string = \"\";\r\n  public manaCost:string = \"\";\r\n\r\n  public getLSKey():string \r\n  {\r\n    return \"Card|\" + this.name;\r\n  }\r\n\r\n  constructor(public name: string) { }\r\n\r\n  private static readonly cardRegEx = /([0-9]+)\\s?([^(]+)\\s?(\\([A-Z]{3}\\))?\\s?([0-9]+)?/\r\n  //EJ: 32 Mountain (M20) 276\r\n  static parseLine(cardStr:string):[number,Card|null] {\r\n    let matches = cardStr.trim().match(Card.cardRegEx)\r\n    if (matches === undefined || matches === null) {\r\n      return [0,null];\r\n    }\r\n    else {\r\n      let m = matches as RegExpMatchArray\r\n      if (m.length > 2) { //I only really need amount + name, set+code are just bonus\r\n        let copies = Number.parseInt(m[1])\r\n        let card = new Card(m[2].trim())\r\n        if(m.length > 3 && m[3] !== undefined) card.cardSet = m[3].replace(\"(\",\"\").replace(\")\",\"\")\r\n        if(m.length > 4 && m[4] !== undefined) card.cardNumber = Number.parseInt(m[4])\r\n        return [copies,card];\r\n        //return new Array<Card>(copies).fill(card)\r\n      }\r\n      else {\r\n        return [0,null]\r\n      }\r\n    }\r\n  }\r\n\r\n  static parseDeck(deckString:string):Array<Card> {\r\n    let lines = deckString.split('\\n')\r\n    return lines.flatMap(s => {\r\n      let [n,c] = Card.parseLine(s)\r\n      if(c instanceof Card) return new Array<Card>(n).fill(c)\r\n      else return []\r\n    })\r\n  }\r\n\r\n  static fetchCardInfo(c:Card):Promise<Card> {\r\n    return new Promise<Card>((resolve, reject) => {\r\n      \r\n      let cacheCard = LocalStorage.LoadT(c.getLSKey(), Card.fromJSON)\r\n      if(cacheCard == null) {\r\n        // console.log(\"Fetching\",c.name,\"data from scryfall\")\r\n        scryfall.getCardByName(c.name, true).then(res => {\r\n          //  console.log(\"fetched data for\",c.name,res)\r\n          let newCard = new Card(res.name)\r\n          newCard.cardSet = res.set.toUpperCase()\r\n          newCard.cardNumber = res.collector_number?Number.parseInt(res.collector_number):c.cardNumber\r\n          newCard.cardType = res.type_line\r\n          newCard.cmc = res.cmc\r\n          newCard.manaCost = res.mana_cost\r\n          newCard.power = res.power?Number.parseInt(res.power):Number.NaN\r\n          newCard.toughness = res.toughness?Number.parseInt(res.toughness):Number.NaN\r\n          newCard.oracleText = res.oracle_text||\"\"\r\n          // console.log(\"response to\",c,\"->\",res)\r\n          LocalStorage.SaveT(c.getLSKey(),newCard,Card.toJSON)\r\n          if(newCard.getLSKey() !== c.getLSKey()) LocalStorage.SaveT(newCard.getLSKey(),newCard,Card.toJSON)\r\n          resolve(newCard)\r\n        }, err => {\r\n          console.log(\"error fetching\",c,\"->\",err)\r\n          reject(err)\r\n        })\r\n      } else {\r\n        // console.log(\"Cached data for\",c.name,\"is\",cacheCard)\r\n        resolve(cacheCard)\r\n      }\r\n    });\r\n  }\r\n\r\n  static prefetchDeck(deckStr:string):Promise<Array<Card>> {\r\n    // console.log(\"Card.prefetchDeck\")\r\n    let cards = _.uniqBy( Card.parseDeck(deckStr), c => c.name )\r\n    return Promise.all( cards.map(Card.fetchCardInfo) )\r\n  }\r\n\r\n  static toJSON(card:Card):string \r\n  {\r\n    return JSON.stringify(card);\r\n  }\r\n\r\n  static fromJSON(json:string):Card\r\n  {\r\n    const fakeCard = JSON.parse(json) as Card\r\n    let realCard = new Card(fakeCard.name)\r\n    Object.assign(realCard,fakeCard)\r\n    return realCard;\r\n  }\r\n}\r\n","import { GroupTest } from \"../models/GroupTest\"\r\nimport React, { useContext } from \"react\"\r\nimport TestComponent from \"./TestComponent\"\r\nimport { GroupType } from \"../definitions/enums\"\r\nimport { COLOR_ZERO, COLOR_HUND, HandlersContext } from \"../definitions/constants\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { DragItem } from \"../definitions/types\"\r\nimport { useDrag, useDrop } from \"react-dnd\"\r\nimport { Card } from \"../models/Card\"\r\n\r\nconst GroupTestComponent: React.FC<{test:GroupTest, allTests:Array<TestCase>, cards:Array<Card>}> = (props) => {\r\n\r\n    const context = useContext(HandlersContext)\r\n    \r\n    const [{isDragging},dragRef, dragPreview] = useDrag({\r\n        item:{\r\n            type:typeof TestCase, \r\n            id:props.test.id\r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n    const [{ isOver, canDrop }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            // console.log(\"SingleTest.drop\",item.id,\"into\",props.test.id)\r\n            if(monitor.didDrop()) return; //Checking if an earlier node caught it\r\n            // console.log(\"Drop uncaught so far, calling context\")\r\n            if(monitor.canDrop()) {\r\n                context.onDragDrop(item.id,props.test.id)\r\n            }\r\n        },\r\n        //No restrictions on singles, but groups cannot be dropped on a child item\r\n        canDrop: (item:DragItem) => {\r\n            //return item.id !== props.test.id && item.parentId !== props.test.id\r\n            return context.checkCanDrop(item.id , props.test.id)\r\n        },\r\n        collect: mon => ({\r\n          isOver: !!mon.isOver({shallow:true}),\r\n          canDrop: !!mon.canDrop(),\r\n        })\r\n    })\r\n  \r\n    return (\r\n      <div className={\"group\"+ (isOver?\" hovered\":\"\")+ (canDrop?\" canDrop\":\" noDrop\")+ (isDragging?\" dragging\":\"\") } ref={dropRef}>\r\n        <div className=\"line groupHeader\" ref={dragPreview}>\r\n          <input className=\"handle\" ref={dragRef} readOnly value={`${props.test.getPercent()}%`}  style={{backgroundColor:COLOR_ZERO.interpolateWith(COLOR_HUND,props.test.hits/props.test.tries).toCSS()}} />\r\n          <input className=\"fill\" value={props.test.name} onChange={(e) => context.onChangeGroupName(props.test.id,e.target.value)} placeholder=\"Group Name\" />\r\n          <input readOnly disabled value=\"for\" />\r\n          <select value={props.test.groupType} onChange={(e) => context.onChangeGroupType(props.test.id,e.target.value as GroupType)} >\r\n            <option value={GroupType.ALL}>ALL</option>\r\n            <option value={GroupType.ANY}>ANY</option>\r\n          </select>\r\n          <input readOnly disabled value=\"of:\" />\r\n        </div>\r\n        <div className=\"children\">\r\n        {props.test.getChildren(props.allTests).sort((a,b)=>a.id-b.id).map(ct => <TestComponent key={ct.id+\"_cmp\"} test={ct} allTests={props.allTests} cards={props.cards} />)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default GroupTestComponent","import { SingleTest } from \"../models/SingleTest\"\r\nimport React, { useContext } from \"react\"\r\nimport { CompareType, MatchType } from \"../definitions/enums\"\r\nimport { COLOR_ZERO, COLOR_HUND, HandlersContext } from \"../definitions/constants\"\r\nimport {useDrag,useDrop} from \"react-dnd\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { DragItem } from \"../definitions/types\"\r\nimport { Card } from \"../models/Card\"\r\nimport _ from \"lodash\"\r\n\r\n\r\nconst SingleTestComponent: React.FC<{test:SingleTest, cards:Array<Card>}> = (props) => {\r\n\r\n    const context = useContext(HandlersContext)\r\n    \r\n    const [{isDragging},dragRef, dragPreview] = useDrag({\r\n        item:{\r\n            type:typeof TestCase, \r\n            id:props.test.id\r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n    const [{ isOver, canDrop }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            // console.log(\"SingleTest.drop\",item.id,\"into\",props.test.id)\r\n            if(monitor.didDrop()) return; //Checking if an earlier node caught it\r\n            // console.log(\"Drop uncaught so far, calling context\")\r\n            if(monitor.canDrop()) {\r\n                context.onDragDrop(item.id,props.test.id)\r\n            }\r\n        },\r\n        //No restrictions on singles, but groups cannot be dropped on a child item\r\n        canDrop: (item:DragItem) => {\r\n            //return item.id !== props.test.id && item.parentId !== props.test.id\r\n            return context.checkCanDrop(item.id , props.test.id)\r\n        },\r\n        collect: mon => ({\r\n          isOver: !!mon.isOver({shallow:true}),\r\n          canDrop: !!mon.canDrop(),\r\n        })\r\n    })\r\n    \r\n    const opts_cardNames = props.cards.map(card => card.name).sort().map(val => {return {value:MatchType.Name+\":\"+val,text:val}})\r\n    const opts_cardTypes = _.uniq(props.cards.flatMap(c => c.cardType?.split(/[\\s/\\W]+/)).filter(w => w !== undefined).map(w => w as string)).map(val => {return {value:MatchType.CardType+\":\"+val,text:val}})\r\n    const opts_CMC = _.uniq(props.cards.map(c => c.cmc)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:MatchType.CMC+\":\"+val,text:`CMC = ${val}`}})\r\n    const opts_Power = _.uniq(props.cards.map(c => c.power)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:MatchType.Power+\":\"+val,text:`Power = ${val}`}})\r\n    const opts_Toughness = _.uniq(props.cards.map(c => c.toughness)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:MatchType.Toughness+\":\"+val,text:`Toughness = ${val}`}})\r\n    const selectedValue = props.test.match+\":\"+props.test.target\r\n\r\n    return (\r\n    <div className={\"single\" + (isOver?\" hovered\":\"\") + (canDrop?\" canDrop\":\" noDrop\") + (isDragging?\" dragging\":\"\") } ref={dropRef}>\r\n      <div className=\"line\" ref={dragPreview}>\r\n        \r\n        <input className=\"handle\" ref={dragRef} readOnly value={`${props.test.getPercent()}%`} style={{backgroundColor:COLOR_ZERO.interpolateWith(COLOR_HUND,props.test.hits/props.test.tries).toCSS()}} />\r\n        \r\n        <select value={selectedValue} className=\"fill\" onChange={(e) => {\r\n          const [match,value] = e.target.value.split(\":\")\r\n          const mType: MatchType = match as MatchType;\r\n          // console.log(match,\"==>\",mType)\r\n          context.onChangeSingleTarget(props.test.id,value, mType )\r\n        }} >\r\n          <option defaultChecked>Select a condition...</option>\r\n          <optgroup label=\"Cards with name...\">\r\n          {opts_cardNames.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with type...\">\r\n          {opts_cardTypes.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with CMC...\">\r\n          {opts_CMC.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with Power...\">\r\n          {opts_Power.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with Toughness...\">\r\n          {opts_Toughness.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n        </select>\r\n        {/* <input value={props.test.target} className=\"fill\" onChange={(e) => context.onChangeSingleTarget(props.test.id,e.target.value)} placeholder=\"Target Card\" /> */}\r\n\r\n\r\n        {/* https://react-select.com/ maybe? */}\r\n        <select value={props.test.compareCards} onChange={(e) => context.onChangeSingleCompare(props.test.id,e.target.value as CompareType)}>\r\n          <option value={CompareType.GT}>&ge;</option>\r\n          <option value={CompareType.EQ}>=</option>\r\n          <option value={CompareType.LT}>&le;</option>\r\n        </select>\r\n        <input type=\"number\" value={props.test.amount} onChange={(e) => context.onChangeSingleAmount(props.test.id,Number.parseInt(e.target.value))}/>\r\n        <input readOnly disabled value=\"by T\" />\r\n        <input type=\"number\" value={props.test.turn} onChange={(e) => context.onChangeTestTurn(props.test.id,Number.parseInt(e.target.value))}/>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  export default SingleTestComponent","import { SingleTest } from \"../models/SingleTest\"\r\nimport React, { useContext, useState, useEffect } from \"react\"\r\nimport { CompareType, MatchType } from \"../definitions/enums\"\r\nimport { COLOR_ZERO, COLOR_HUND, HandlersContext } from \"../definitions/constants\"\r\nimport {useDrag,useDrop} from \"react-dnd\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { DragItem } from \"../definitions/types\"\r\nimport { Card } from \"../models/Card\"\r\nimport _ from \"lodash\"\r\n\r\n\r\nconst SingleTestComponentVerbose: React.FC<{test:SingleTest, cards:Array<Card>}> = (props) => {\r\n\r\n    const context = useContext(HandlersContext)\r\n    const [selectedMatch,setMatch] = useState(props.test.match)\r\n    const [selectedTarget,setTarget] = useState(props.test.target)\r\n    useEffect(() => {\r\n      // console.log(\"SingleTestComponent.useEffect\")\r\n      context.onChangeSingleTarget(props.test.id,selectedTarget,selectedMatch )\r\n    }, [selectedMatch,selectedTarget])\r\n    \r\n    const [{isDragging},dragRef, dragPreview] = useDrag({\r\n        item:{\r\n            type:typeof TestCase, \r\n            id:props.test.id\r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n    const [{ isOver, canDrop }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            // console.log(\"SingleTest.drop\",item.id,\"into\",props.test.id)\r\n            if(monitor.didDrop()) return; //Checking if an earlier node caught it\r\n            // console.log(\"Drop uncaught so far, calling context\")\r\n            if(monitor.canDrop()) {\r\n                context.onDragDrop(item.id,props.test.id)\r\n            }\r\n        },\r\n        //No restrictions on singles, but groups cannot be dropped on a child item\r\n        canDrop: (item:DragItem) => {\r\n            //return item.id !== props.test.id && item.parentId !== props.test.id\r\n            return context.checkCanDrop(item.id , props.test.id)\r\n        },\r\n        collect: mon => ({\r\n          isOver: !!mon.isOver({shallow:true}),\r\n          canDrop: !!mon.canDrop(),\r\n        })\r\n    })\r\n    \r\n    const opts_cardNames = props.cards.map(card => card.name).sort().map(val => {return {value:val,text:val}})\r\n    const opts_cardTypes = _.uniq(props.cards.flatMap(c => c.cardType?.split(/[\\s/\\W]+/)).filter(w => w !== undefined).map(w => w as string)).map(val => {return {value:val,text:val}})\r\n    const opts_CMC = _.uniq(props.cards.map(c => c.cmc)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:val.toString(),text:`${val}`}})\r\n    const opts_Power = _.uniq(props.cards.map(c => c.power)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:val.toString(),text:`${val}`}})\r\n    const opts_Toughness = _.uniq(props.cards.map(c => c.toughness)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:val.toString(),text:`${val}`}})\r\n    let validOptions:Array<{value:string,text:string}> = [];\r\n    switch (props.test.match) {\r\n      case MatchType.Name:\r\n        validOptions = opts_cardNames\r\n        break;\r\n      case MatchType.CardType:\r\n        validOptions = opts_cardTypes\r\n        break;\r\n      case MatchType.CMC:\r\n        validOptions = opts_CMC\r\n        break;\r\n      case MatchType.Power:\r\n        validOptions = opts_Power\r\n        break;\r\n      case MatchType.Toughness:\r\n      validOptions = opts_Toughness\r\n        break;\r\n    }\r\n\r\n    let targetCompareOptions:Array<{value:string,text:string}> = []\r\n    if (props.test.match === MatchType.Name || props.test.match === MatchType.CardType) \r\n    {\r\n      targetCompareOptions = [{value:CompareType.EQ,text:\"being\"},{value:CompareType.NE,text:\"not\"}]\r\n    } else {\r\n      targetCompareOptions = [{value:CompareType.EQ,text:\"exactly\"},{value:CompareType.NE,text:\"not\"},{value:CompareType.GT,text:\"at least\"},{value:CompareType.LT,text:\"at most\"}]\r\n    }\r\n\r\n    return (\r\n    <div className={\"single\" + (isOver?\" hovered\":\"\") + (canDrop?\" canDrop\":\" noDrop\") + (isDragging?\" dragging\":\"\") } ref={dropRef}>\r\n      <div className=\"line verbose\" ref={dragPreview}>\r\n        \r\n        <input className=\"handle\" ref={dragRef} readOnly value={`${props.test.getPercent()}%`} style={{backgroundColor:COLOR_ZERO.interpolateWith(COLOR_HUND,props.test.hits/props.test.tries).toCSS()}} />\r\n        \r\n        <input value=\"Draw\" readOnly disabled />\r\n        <select value={props.test.compareCards} onChange={(e) => context.onChangeSingleCompare(props.test.id,e.target.value as CompareType)}>\r\n          <option value={CompareType.GT}>at least</option>\r\n          <option value={CompareType.EQ}>exactly</option>\r\n          <option value={CompareType.LT}>at most</option>\r\n        </select>\r\n\r\n        <select value={props.test.amount} onChange={(e) => context.onChangeSingleAmount(props.test.id,Number.parseInt(e.target.value))}>\r\n          {[0,1,2,3,4,5,6,7,8,9].map(i => <option key={\"amount_\"+i} value={i}>{i}</option>)}\r\n        </select>\r\n\r\n        <input value={\"card\"+(props.test.amount!==1?\"s\":\"\")} readOnly disabled />\r\n        <select value={props.test.match} onChange={e => setMatch(e.target.value as MatchType)}>\r\n          <option value={MatchType.Name}>with name</option>\r\n          <option value={MatchType.CardType}>with type</option>\r\n          <option value={MatchType.CMC}>with CMC</option>\r\n          <option value={MatchType.Power}>with Power</option>\r\n          <option value={MatchType.Toughness}>with Toughness</option>\r\n        </select>\r\n\r\n        <select value={props.test.compareTarget} onChange={e => context.onChangeSingleCompareTarget(props.test.id, e.target.value as CompareType)}>\r\n          {targetCompareOptions.map(o => <option key={o.value} value={o.value}>{o.text}</option>)}\r\n        </select>\r\n\r\n        <select value={props.test.target} className=\"fill\" onChange={e => {setTarget(e.target.value)}}>\r\n          {validOptions.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n        </select>\r\n\r\n        <input readOnly disabled value=\"by turn\" />\r\n\r\n        <select value={props.test.turn} onChange={(e) => context.onChangeTestTurn(props.test.id,Number.parseInt(e.target.value))}>\r\n          {[1,2,3,4,5,6,7,8,9,10].map(i => <option key={\"turn_\"+i} value={i}>{i}</option>)}\r\n        </select>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  export default SingleTestComponentVerbose","import { GroupTest } from \"../models/GroupTest\"\r\nimport React from \"react\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { SingleTest } from \"../models/SingleTest\"\r\nimport GroupTestComponent from \"./GroupTestComponent\"\r\nimport SingleTestComponent from \"./SingleTestComponent\"\r\nimport { Card } from \"../models/Card\"\r\nimport SingleTestComponentVerbose from \"./SingleTestComponentVerbose\"\r\n\r\nconst TestComponent:React.FC<{test:TestCase, allTests:Array<TestCase>, cards:Array<Card>}> = (props) => {\r\n    if(props.test instanceof GroupTest) \r\n      return <GroupTestComponent test={props.test} allTests={props.allTests} cards={props.cards} />\r\n    else if(props.test instanceof SingleTest && window.innerWidth <= 810) \r\n      return <SingleTestComponent test={props.test} cards={props.cards} />\r\n    else if(props.test instanceof SingleTest)\r\n      return <SingleTestComponentVerbose test={props.test} cards={props.cards} />\r\n    else return <div />\r\n  }\r\n\r\n  export default TestComponent","import React, {  } from \"react\"\r\nimport { useDrop } from \"react-dnd\";\r\nimport { TestCase } from \"../models/TestCase\";\r\nimport { DragItem } from \"../definitions/types\";\r\n\r\nconst TrashcanComponent: React.FC<{dropHandler:(id:number)=>void}> = (props) => {\r\n\r\n    const [{ isOver }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            props.dropHandler(item.id)\r\n        },\r\n        collect: mon => ({\r\n            isOver: !!mon.isOver({shallow:true})\r\n        })\r\n    })\r\n\r\n    return (\r\n    <div id=\"trash\" ref={dropRef} className={isOver?\" hovered\":\"\"} >Drop here to delete</div>\r\n    )\r\n}\r\n\r\nexport default TrashcanComponent;","import { useState } from \"react\";\r\nimport { LocalStorage } from \"./LocalStorage\";\r\n\r\n//Thanks to: https://usehooks.com/useLocalStorage/\r\n\r\nfunction useLocalStorage(key:string, initialValue:string):[string,(value:string)=>void] {\r\n  \r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {  \r\n        const item = LocalStorage.Load(key)\r\n        return item || initialValue;\r\n      } catch (error) {\r\n        return initialValue;\r\n      }\r\n  \r\n    });\r\n  \r\n    const setValue = (value:string) => {\r\n  \r\n      try {\r\n        const valueToStore = value;\r\n        setStoredValue(valueToStore);\r\n        //Potential upgrade: Define an ISerializable interface and receive and object of that interface\r\n        LocalStorage.Save(key,valueToStore);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n  \r\n    };\r\n    return [storedValue, setValue];\r\n  \r\n  }\r\n\r\nexport default useLocalStorage","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport _ from 'lodash'; //Only using it for _.shuffle\nimport {TestCase } from './models/TestCase';\nimport {Tests2JSON, JSON2Tests} from './definitions/utils';\nimport { Card } from './models/Card';\nimport { GroupTest } from './models/GroupTest';\nimport { SingleTest } from './models/SingleTest';\nimport TestComponent from './components/TestComponent';\nimport {TOTAL_RUNS, HandlersContext} from './definitions/constants'\nimport { TestType, GroupType, CompareType, MatchType } from './definitions/enums';\nimport { DndProvider } from 'react-dnd'\nimport MultiBackend from 'react-dnd-multi-backend';\nimport HTML5toTouch from 'react-dnd-multi-backend/dist/esm/HTML5toTouch';\nimport TrashcanComponent from './components/TrashcanComponent';\nimport useLocalStorage from './utils/useLocalStorage'\nimport AwesomeDebouncePromise from 'awesome-debounce-promise'\nimport useConstant from 'use-constant'\nimport {useAsync} from 'react-async-hook'\n\nconst deckString = `28 Mountain (M20) 276\n4 Terror of Mount Velus (THB) 295\n4 Purphoros, Bronze-Blooded (THB) 150\n4 Ilharg, the Raze-Boar (WAR) 133\n4 Cavalier of Flame (M20) 125\n4 Storm's Wrath (THB) 157\n4 Fires of Invention (ELD) 125\n4 Bonecrusher Giant (ELD) 115\n4 Drakuseth, Maw of Flames (M20) 136`\n\nconst json = [\n  { id: 6, type: TestType.Group, parent: 15, name: \"Curve\" },\n  { id: 1, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 1, turn: 1, compare: CompareType.GT },\n  { id: 2, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 2, turn: 2, compare: CompareType.GT },\n  { id: 3, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 3, turn: 3, compare: CompareType.GT },\n  { id: 4, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 4, turn: 4, compare: CompareType.GT },\n  { id: 5, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 5, turn: 5, compare: CompareType.GT },\n  { id: 14, type: TestType.Group, group: GroupType.ALL, parent: 15, name: \"Combo Pieces\" },\n  { id: 7, type: TestType.Single, turn: 4, target: \"Fires of Invention\", parent: 14 },\n  { id: 8, type: TestType.Single, turn: 5, target: \"Purphoros, Bronze-Blooded\", parent: 14 },\n  { id: 9, type: TestType.Single, turn: 5, target: \"Cavalier of Flame\", parent: 14 },\n  { id: 10, type: TestType.Group, group: GroupType.ANY, parent: 14, name: \"Any 1 extra\" },\n  { id: 11, type: TestType.Single, turn: 5, target: \"Terror of Mount Velus\", parent: 10 },\n  { id: 12, type: TestType.Single, turn: 5, target: \"Drakuseth, Maw of Flames\", parent: 10 },\n  { id: 13, type: TestType.Single, turn: 5, target: \"Ilharg, the Raze-Boar\", parent: 10 },\n  { id: 15, type: TestType.Group, group: GroupType.ALL, parent: null, name: \"Magical Xmas Land\" },\n]\n\nlet defaultTests: Array<TestCase> = json.map(o => {\n  if (o.type === TestType.Group) {\n\n    let test = new GroupTest(o.id)\n    if (typeof o.parent === \"number\")\n      test.parentId = o.parent as number;\n    if (o.group !== undefined)\n      test.groupType = o.group as GroupType\n\n    test.name = o.name;\n\n    return test;\n  } else {\n    let test = new SingleTest(o.id, o.target as string)\n\n    if (typeof o.parent === \"number\")\n      test.parentId = o.parent as number;\n    if (o.amount !== undefined)\n      test.amount = o.amount as number;\n    if (o.turn !== undefined)\n      test.turn = o.turn as number;\n    if (o.compare !== undefined)\n      test.compareCards = o.compare as CompareType;\n\n    return test;\n  }\n})\n\nconst App: React.FC = () => {\n\n  // console.log(\"Main App initializing\")\n  const [persistedDeck, persistDeck] = useLocalStorage(\"deck\",deckString)\n  const [persistedTests, persistTests] = useLocalStorage(\"tests\",Tests2JSON(defaultTests))\n  const [stateDeck, setDeck] = useState(persistedDeck)\n\n  const prefetchCards = async (deckString:string) => {\n    Card.prefetchDeck(stateDeck).then(cards => {\n      // console.log(\"card prefetchDeck completed\")\n      setCards(cards)\n    })\n  }\n\n  const [stateCards, setCards] = useState(() => {\n    // console.log(\"initial prefetchDec start\")\n    prefetchCards(stateDeck);\n    return [] as Array<Card>\n  })\n  const [stateTests,setTests] = useState(JSON2Tests(persistedTests))\n  const [numOfRuns,setRuns] = useState(TOTAL_RUNS)\n  const [saved, setSaved] = useState(true)\n  \n  const debouncedPrefetch = useConstant(() =>\n    AwesomeDebouncePromise(prefetchCards, 500)\n  );\n  const debouncedPrefetchAsync = useAsync(debouncedPrefetch,[stateDeck])\n  \n  useEffect(()=>{\n      setSaved(false)\n      // console.log(stateTests.map(t => t.toString()))\n  }, [stateTests,stateDeck])  \n\n  const updateTest = (id:number, transform:(test:TestCase) => void) =>\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id)  transform(t); \n      return t;\n      }))\n  }\n  const updateSingleTest = (id:number, transform:(test:SingleTest) => void) =>\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id && t instanceof SingleTest) transform(t); \n      return t;\n      }))\n  }\n  const updateGroupTest = (id:number, transform:(test:GroupTest) => void) =>\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id && t instanceof GroupTest) transform(t); \n      return t;\n      }))\n  }\n\n  const onChangeTestTurn = (id:number,turn:number) => updateSingleTest(id, t => t.turn = turn)\n  const onChangeSingleTarget = (id:number,target:string,match?:MatchType) => updateSingleTest(id, t => {console.log(id,match,target);t.target = target; t.match = match?match:t.match})\n  const onChangeGroupName = (id:number,name:string) => updateGroupTest(id, t => t.name = name)\n  const onChangeGroupType = (id:number,group:GroupType) => updateGroupTest(id, t => t.groupType = group)\n  const onChangeSingleCompare = (id:number,compare:CompareType) => updateSingleTest(id,t => t.compareCards = compare)\n  const onChangeSingleCompareTarget = (id:number,compare:CompareType) =>{console.log(id,compare); updateSingleTest(id,t => t.compareTarget = compare)}\n  const onChangeSingleAmount = (id:number,amount:number) => updateSingleTest(id, t => t.amount = amount)\n  const checkCanDrop = (draggedTestId:number,droppedOnTestId:number) => {\n    if(draggedTestId === droppedOnTestId) {\n      return false;\n    }\n\n    const draggedTest = stateTests.find(t => t.id === draggedTestId)\n    const droppedOnTest = stateTests.find(t => t.id === droppedOnTestId)\n    if(draggedTest instanceof TestCase && droppedOnTest instanceof TestCase)\n    {\n      if(draggedTest.parentId !== undefined && draggedTest.parentId === droppedOnTest.id) {\n        return false;\n      }\n\n      //If dragged and dropped are the only children of the same parent, we would create an identical group, so no need\n      if(draggedTest.parentId !== undefined && draggedTest.parentId === droppedOnTest.parentId) {\n        let parentTest = stateTests.find(t => t.id === draggedTest.parentId)\n        if(parentTest instanceof GroupTest && parentTest.getChildren.length === 2)\n          return false;\n      }\n\n      //if the dragged test is a Group, we need to check we don't drop him inside one of his children\n      if(draggedTest instanceof GroupTest)\n      {\n        const descendants = draggedTest.getAllDescendants(stateTests);\n        if(descendants.some(d => d.id === droppedOnTestId)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n  const onDragDrop = (draggedTestId:number,droppedOnTestId:number) => {\n    //Invalid drops are being dropped into the element immediatly above, which I believe is the first valid drop target\n    console.log(\"Handlers\",\"Dropped\",draggedTestId,\"into\",droppedOnTestId)\n    if(checkCanDrop(draggedTestId,droppedOnTestId) === false) {\n      console.log(\"Invalid drop\")\n      return;\n    }\n\n    // console.log(\"App.onDragDrop\",draggedTestId,droppedOnTestId)\n    const draggedTest = stateTests.find(t => t.id === draggedTestId)\n    const droppedOnTest = stateTests.find(t => t.id === droppedOnTestId)\n    if(draggedTest instanceof TestCase && droppedOnTest instanceof TestCase)\n    {\n      //In both scenarios, the dragged test has a new parent\n      if(draggedTest.parentId !== undefined) {\n        let draggedTestParent = stateTests.find(t => t.id === draggedTest.parentId)\n        if(draggedTestParent instanceof GroupTest) {\n          if(draggedTestParent.getChildren(stateTests).length === 1) { //If it was the only child, we remove the parent from the list\n            setTests(prevTests => prevTests.filter(t => t.id !== draggedTest.parentId))\n          } \n        }\n      }\n\n      //Case A: Drop Single/Group on Single => Create a group (with parent = droppedOn.parent), and set both single tests parent to the new group\n      if(droppedOnTest instanceof SingleTest)\n      {\n        const newGroup = new GroupTest(1 + Math.max(...stateTests.map(t => t.id)) )\n        \n        newGroup.parentId = droppedOnTest.parentId\n        setTests(prevTests => [...prevTests,newGroup])\n        updateTest(draggedTestId, t => t.parentId = newGroup.id)\n        updateTest(droppedOnTestId, t => t.parentId = newGroup.id)\n      }\n\n      //Case B: Drop Single/Group on Group => Set the parent for the dragged item to the dropped's ID\n      if(droppedOnTest instanceof GroupTest)\n      {\n        updateTest(draggedTestId, t => t.parentId = droppedOnTest.id)\n      }\n    }\n  }\n\n  const onTrashDrop = (id:number) => {\n    //deleting the whole thing if it's a group, there are arguments for deleting just the wrapper and ungrouping the children\n    const deletedTest = stateTests.find(t => t.id === id)\n    if(deletedTest instanceof SingleTest) {\n      setTests(prevTests => prevTests.filter(t => t.id !== deletedTest.id))\n    }\n    else if(deletedTest instanceof GroupTest) {\n      const allChildrenIDs = deletedTest.getAllDescendants(stateTests).map(t => t.id)\n      const allDeletedIDs = [deletedTest.id, ...allChildrenIDs]\n      setTests(prevTests => prevTests.filter(t => allDeletedIDs.includes(t.id) === false ))\n    }\n  }\n\n  const handlers = {\n    onChangeTestTurn:onChangeTestTurn,\n    onChangeSingleTarget:onChangeSingleTarget,\n    onChangeGroupName:onChangeGroupName,\n    onChangeGroupType:onChangeGroupType,\n    onChangeSingleCompare:onChangeSingleCompare,\n    onChangeSingleAmount:onChangeSingleAmount,\n    onDragDrop:onDragDrop,\n    checkCanDrop:checkCanDrop,\n    onChangeSingleCompareTarget:onChangeSingleCompareTarget\n  }\n  const getRootTests = () => { return stateTests.filter(t => t.parentId == null)  }\n  const handleClickAdd = () => setTests(prevTests => [...prevTests, new SingleTest(1 + Math.max(0, ...prevTests.map(t => t.id)), \"\")])\n  const handleClickRun = () => runSimAsync.execute()\n  const handleSave = () => {\n    persistDeck(stateDeck)\n    persistTests(Tests2JSON(stateTests))\n    setSaved(true)\n  }\n\n  const runSim = async () => {\n    let start = new Date();\n    let deck = await Promise.all(Card.parseDeck(stateDeck).map(Card.fetchCardInfo))\n    console.log(\"runSim\",\"start\")\n    // console.log(stateCards)\n    let newTests = TestCase.clone(stateTests)\n\n    let rootTests: Array<TestCase> = newTests.filter(t => t.parentId == null) \n    // let deck = Card.parseDeck(stateDeck).flatMap(deck => {return stateCards.find(sc => sc.name === deck.name)||[] })\n    \n    // console.log(deck)\n    for (let i = 0; i < TOTAL_RUNS; i++) {\n      let shuffled = _.shuffle(deck);\n      rootTests.forEach(t => t.IsTrue(shuffled, newTests))\n    }\n\n    setTests(newTests)\n    let end = new Date();\n    console.log(\"runSim\",\"end\", end.getTime() - start.getTime())\n  }\n  const runSimAsync = useAsync(runSim,[])\n\n\n  //Handle the deck just as a big string for the app, and only parse it as a deck when we click run\n  //we can try and pre-fetch the card info in the background maybe?\n\n  //https://blog.axlight.com/posts/how-i-developed-react-hooks-for-web-workers/\n  //To run the sim as a background process\n\n  return (\n    <div className=\"App\" style={{ \"textAlign\": \"left\" }}>\n      <div className=\"header\">\n      {/* <ul className=\"nav nav-pills\">\n        <li role=\"presentation\" className=\"dropdown\">\n          <a className=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Actions <span className=\"caret\"></span>\n          </a>\n          <ul className=\"dropdown-menu\">\n            ...\n          </ul>\n        </li>\n        <li role=\"presentation\"><a href=\"#\">?</a></li>\n      </ul> */}\n      </div>\n      <div className=\"content\">\n        <div  id=\"deck\">\n          <div className=\"actions line\">\n          <button className=\"left fill run\" onClick={handleClickRun} disabled={debouncedPrefetchAsync.loading||runSimAsync.loading} >RUN</button>\n          <input type=\"number\" value={numOfRuns} onChange={e => setRuns(Number.parseInt(e.target.value))} />\n          <button className=\"right fill run\" onClick={handleClickRun} disabled={debouncedPrefetchAsync.loading||runSimAsync.loading} >times</button>\n          <div className=\"horizontalSpacer\" />\n          <button className=\"add fill\" onClick={handleClickAdd}>Add Condition</button>\n          </div>\n          \n          <em>Deck</em>\n          <textarea value={stateDeck} onChange={e => {setDeck(e.target.value); debouncedPrefetchAsync.execute(e.target.value);}} />\n          <div className=\"line\">\n            <button id=\"save\" disabled={saved} onClick={handleSave}>{saved?\"Saved!\":\"Save\"}</button>\n             <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n             <TrashcanComponent dropHandler={onTrashDrop} />\n             </DndProvider>\n          </div>\n        </div>\n        \n        <HandlersContext.Provider value={handlers}>\n        <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n        <div id=\"tests\">\n          {getRootTests().sort((a,b) => a.id - b.id).map(t => <TestComponent key={t.id + \"_tst\"} test={t} allTests={stateTests} cards={stateCards} />)}\n        </div>\n        </DndProvider>\n        </HandlersContext.Provider>\n        \n      </div>\n      <div className=\"footer\" />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
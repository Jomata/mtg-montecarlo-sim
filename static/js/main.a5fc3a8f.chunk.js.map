{"version":3,"sources":["definitions/enums.tsx","models/TestCase.tsx","models/RGB.tsx","definitions/constants.tsx","models/SingleTest.tsx","models/GroupTest.tsx","definitions/utils.tsx","utils/LocalStorage.tsx","models/Card.tsx","components/GroupTestComponent.tsx","components/SingleTestComponent.tsx","components/TestComponent.tsx","components/TrashcanComponent.tsx","utils/useLocalStorage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TestType","GroupType","CompareType","MatchType","TestCase","id","testType","hits","tries","parentId","deck","allTests","result","this","runTest","toFixed","tests","map","t","clone","RGB","red","green","blue","another","percent","COLOR_ZERO","COLOR_HUND","HandlersContext","React","createContext","onChangeTestTurn","turn","onChangeGroupName","name","onChangeGroupType","group","onChangeSingleTarget","target","match","onChangeSingleCompare","compare","onChangeSingleAmount","amount","onDragDrop","draggedTestId","droppedOnTestId","checkCanDrop","SingleTest","Single","Name","GT","EQ","LT","hand","slice","matches","targetN","Number","parseInt","filter","c","includes","length","CMC","cmc","CardType","cardType","Power","power","Toughness","toughness","GroupTest","Group","groupType","ALL","TestSuite","undefined","childrenResults","getChildren","IsTrue","ANY","some","r","every","myChildren","grandChildren","flatMap","ch","getAllDescendants","Tests2JSON","JSON","stringify","LocalStorage","key","content","localStorage","setItem","serializaer","serialized","Save","window","getItem","deserializer","json","Load","error","console","log","Card","cardSet","cardNumber","NaN","oracleText","manaCost","cardStr","trim","cardRegEx","m","copies","card","replace","deckString","split","s","parseLine","n","Array","fill","Promise","resolve","reject","cacheCard","LoadT","getLSKey","fromJSON","scryfall","then","res","newCard","set","toUpperCase","collector_number","type_line","mana_cost","oracle_text","SaveT","toJSON","err","deckStr","cards","_","uniqBy","parseDeck","all","fetchCardInfo","fakeCard","parse","realCard","Object","assign","GroupTestComponent","props","context","useContext","useDrag","item","type","test","collect","monitor","isDragging","dragRef","dragPreview","useDrop","accept","drop","didDrop","canDrop","mon","isOver","shallow","dropRef","className","ref","readOnly","value","getPercent","style","backgroundColor","interpolateWith","toCSS","onChange","e","placeholder","disabled","sort","a","b","ct","SingleTestComponent","opts_cardNames","val","text","opts_cardTypes","uniq","w","opts_CMC","opts_Power","opts_Toughness","selectedValue","mType","defaultChecked","label","TestComponent","TrashcanComponent","dropHandler","useLocalStorage","initialValue","useState","storedValue","setStoredValue","valueToStore","defaultTests","parent","o","App","persistedDeck","persistDeck","persistedTests","persistTests","stateDeck","setDeck","prefetchCards","async","prefetchDeck","setCards","stateCards","pt","newTest","stateTests","setTests","numOfRuns","setRuns","saved","setSaved","debouncedPrefetch","useConstant","AwesomeDebouncePromise","debouncedPrefetchAsync","useAsync","useEffect","updateTest","transform","updateSingleTest","updateGroupTest","draggedTest","find","droppedOnTest","parentTest","d","handlers","draggedTestParent","prevTests","newGroup","Math","max","handleClickRun","runSimAsync","execute","newTests","rootTests","sc","i","shuffled","shuffle","forEach","onClick","loading","DndProvider","backend","MultiBackend","options","HTML5toTouch","deletedTest","allChildrenIDs","allDeletedIDs","Provider","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5fc3a8f.chunk.js","sourcesContent":["\r\nexport enum TestType { Single, Group }\r\n\r\nexport enum GroupType { ALL = \"and\", ANY = \"or\" }\r\n\r\nexport enum CompareType { GT = \">\", EQ = \"=\", LT = \"<\" }\r\n\r\nexport enum MatchType { Name = \"Name\", CardType = \"CardType\", CMC = \"CMC\", Power = \"Power\", Toughness = \"Toughness\" }","import { TestType } from '../definitions/enums';\r\nimport { Card } from \"./Card\";\r\n\r\nexport abstract class TestCase {\r\n  public hits: number = 0;\r\n  public tries: number = 0;\r\n  public parentId?: number;\r\n  constructor(public readonly id: number, public readonly testType: TestType) {\r\n  }\r\n  protected abstract runTest(deck: ReadonlyArray<Card>, allTests:ReadonlyArray<TestCase>): boolean;\r\n  public IsTrue(deck: ReadonlyArray<Card>, allTests:ReadonlyArray<TestCase>): boolean {\r\n    let result = this.runTest(deck, allTests);\r\n    // console.log(\"Test ID\",this.id,\"is at\",this.hits,\"/\",this.tries)\r\n    if (result)\r\n      this.hits++;\r\n    this.tries++;\r\n    // console.log(\"Test ID\",this.id,\"is at\",this.hits,\"/\",this.tries)\r\n    return result;\r\n  }\r\n  public getPercent(): string {\r\n    if(this.tries > 0)\r\n        return (100 * this.hits / this.tries).toFixed(1);\r\n    else\r\n        return \"??\"\r\n  }\r\n  abstract clone():TestCase;\r\n  \r\n  public static clone(tests:ReadonlyArray<TestCase>):Array<TestCase>\r\n  {\r\n      let clones = tests.map(t => t.clone())\r\n      return clones;\r\n  }\r\n}","export class RGB {\r\n  constructor(public red: number, public green: number, public blue: number) { }\r\n  public interpolateWith(another: RGB, percent: number) {\r\n    //making percent from 0 to 1 if it's > 1\r\n    if (percent > 1)\r\n      percent /= 100;\r\n    let resultRed = this.red + percent * (another.red - this.red);\r\n    let resultGreen = this.green + percent * (another.green - this.green);\r\n    let resultBlue = this.blue + percent * (another.blue - this.blue);\r\n    return new RGB(resultRed, resultGreen, resultBlue);\r\n  }\r\n  public toCSS() {\r\n    return `rgb(${this.red},${this.green},${this.blue})`;\r\n  }\r\n}\r\n","import { RGB } from \"../models/RGB\";\r\nimport React from \"react\";\r\nimport { CompareType, GroupType, MatchType } from \"./enums\";\r\n\r\nexport const INITIAL_DRAW: number = 6;\r\nexport const TOTAL_RUNS: number = 9999;\r\n\r\nexport const COLOR_ZERO = new RGB(255, 0, 0)\r\nexport const COLOR_HUND = new RGB(0, 255, 0)\r\n\r\nexport const HandlersContext = React.createContext({\r\n    onChangeTestTurn:(id:number,turn:number) => {},\r\n    onChangeGroupName:(id:number,name:string) => {},\r\n    onChangeGroupType:(id:number,group:GroupType) => {},\r\n    onChangeSingleTarget:(id:number,target:string, match?:MatchType) => {},\r\n    onChangeSingleCompare:(id:number,compare:CompareType) => {},\r\n    onChangeSingleAmount:(id:number,amount:number) => {},\r\n    onDragDrop:(draggedTestId:number,droppedOnTestId:number) => {},\r\n    checkCanDrop:(draggedTestId:number,droppedOnTestId:number):boolean => true\r\n  })","import {TestCase} from '../models/TestCase';\r\nimport { Card } from './Card';\r\nimport { MatchType, CompareType, TestType } from '../definitions/enums';\r\nimport {INITIAL_DRAW} from '../definitions/constants'\r\nexport class SingleTest extends TestCase {\r\n    \r\n  public turn: number = 1;\r\n  public match: MatchType = MatchType.Name;\r\n  public compare: CompareType = CompareType.GT;\r\n  public amount: number = 1;\r\n  constructor(readonly id: number, public target: string) {\r\n    super(id, TestType.Single);\r\n  }\r\n  clone(): TestCase {\r\n    let clone = new SingleTest(this.id, this.target)\r\n    clone.parentId = this.parentId\r\n    clone.turn = this.turn\r\n    clone.match = this.match\r\n    clone.compare = this.compare\r\n    clone.amount = this.amount\r\n    return clone;\r\n  }\r\n  public toString() {\r\n    switch (this.compare) {\r\n      case CompareType.EQ:\r\n        return `${this.amount} ${this.target} by T${this.turn}`;\r\n      case CompareType.GT:\r\n        return `${this.amount}+ ${this.target} by T${this.turn}`;\r\n      case CompareType.LT:\r\n        return `${this.amount}- ${this.target} by T${this.turn}`;\r\n    }\r\n  }\r\n  protected runTest(deck: Array<Card>): boolean {\r\n    //let result = 10 * Math.random() > this.id\r\n    // console.log(\"Single ID\",this.id,result)\r\n    let hand = deck.slice(0, INITIAL_DRAW + this.turn);\r\n    let result: boolean = false;\r\n    let matches: number = 0;\r\n    let targetN = Number.parseInt(this.target)\r\n    switch (this.match) {\r\n      case MatchType.Name:\r\n        matches = hand.filter(c => c.name.includes(this.target)).length;\r\n        break;\r\n      case MatchType.CMC:\r\n        matches = hand.filter(c => c.cmc === targetN).length;\r\n        break;\r\n      case MatchType.CardType:\r\n        matches = hand.filter(c => c.cardType.includes(this.target)).length;\r\n        break;\r\n      case MatchType.Power:\r\n        matches = hand.filter(c => c.power === targetN).length;\r\n        break;\r\n      case MatchType.Toughness:\r\n        matches = hand.filter(c => c.toughness === targetN).length;\r\n        break;\r\n    }\r\n    switch (this.compare) {\r\n      case CompareType.EQ:\r\n        result = matches === this.amount;\r\n        break;\r\n      case CompareType.GT:\r\n        result = matches >= this.amount;\r\n        break;\r\n      case CompareType.LT:\r\n        result = matches <= this.amount;\r\n        break;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {TestCase} from '../models/TestCase';\r\nimport { Card } from './Card';\r\nimport { GroupType, TestType } from '../definitions/enums';\r\n///Idea: The Group test could also have a target amount & comparison type, so you can check that out of your sub-tests, you get >0, exactly 1, >1, etc.\r\nexport class GroupTest extends TestCase {\r\n//   public getChildren: Array<TestCase> = [];\r\n  public groupType: GroupType = GroupType.ALL;\r\n  public name?: string;\r\n  constructor(readonly id: number) {\r\n    super(id, TestType.Group);\r\n  }\r\n  clone(): TestCase {\r\n      let clone = new GroupTest(this.id)\r\n      clone.parentId = this.parentId\r\n//   clone.children = this.children.map(c => c.clone())\r\n      clone.groupType = this.groupType\r\n      clone.name = this.name\r\n      return clone\r\n  }\r\n  public getChildren(TestSuite:Array<TestCase>):Array<TestCase> {\r\n    return TestSuite.filter(t => t.parentId === this.id);\r\n  }\r\n\r\n  public toString() {\r\n    if (this.name !== undefined) {\r\n      return `${this.name} [${this.groupType}]`;\r\n    }\r\n    else {\r\n      return `Group ${this.id} [${this.groupType}]`;\r\n    }\r\n  }\r\n  protected runTest(deck: Array<Card>, allTests:Array<TestCase>): boolean {\r\n    let childrenResults = this.getChildren(allTests).map(c => c.IsTrue(deck, allTests));\r\n    var result: boolean;\r\n    if (this.groupType === GroupType.ANY) {\r\n      result = childrenResults.some(r => r);\r\n    }\r\n    else {\r\n      result = childrenResults.every(r => r);\r\n    }\r\n    // console.log(\"Group ID\",this.id,result)\r\n    return result;\r\n  }\r\n\r\n  public getAllDescendants(TestSuite:Array<TestCase>): Array<TestCase> {\r\n    const myChildren = this.getChildren(TestSuite);\r\n    const groupChildren = myChildren.flatMap(c => {\r\n        if(c instanceof GroupTest)\r\n            return [c as GroupTest]\r\n        else return []\r\n    })\r\n    const grandChildren = groupChildren.flatMap(ch => ch.getAllDescendants(TestSuite))\r\n\r\n    return [...myChildren,...grandChildren]\r\n  } \r\n}\r\n","import { TestCase } from \"../models/TestCase\";\r\nimport { SingleTest } from \"../models/SingleTest\";\r\nimport { TestType } from \"./enums\";\r\nimport { GroupTest } from \"../models/GroupTest\";\r\n\r\nexport function Tests2JSON(tests:Array<TestCase>):string\r\n  {\r\n    return JSON.stringify(tests)\r\n  }\r\n\r\nexport function JSON2Tests(json:string):Array<TestCase>\r\n  {\r\n      //JSON.parse returns _objects_ with the same properties as the classes we want\r\n      //So we need to transform those objets to actual class instances\r\n      let pseudoTests:Array<TestCase> = JSON.parse(json);\r\n      let realTests:Array<TestCase> = pseudoTests.flatMap(pt => {\r\n          let newTest:TestCase\r\n          if(pt.testType === TestType.Single) {\r\n              newTest = new SingleTest(pt.id,\"\")\r\n          } else if (pt.testType === TestType.Group) {\r\n              newTest = new GroupTest(pt.id)\r\n          } else {\r\n              return []\r\n          }\r\n\r\n          Object.assign(newTest,pt)\r\n          return [newTest];\r\n      })\r\n      \r\n    return realTests\r\n  }","export abstract class LocalStorage \r\n{\r\n    //TODO: Save(string,ISerializable)\r\n    //TODO: Save(string,T => string)\r\n    //reverse for load\r\n\r\n    public static Save(key:string, content:string):void\r\n    {\r\n        localStorage.setItem(key, content);\r\n    }\r\n\r\n    public static SaveT<T>(key:string, content:T, serializaer:(o:T)=>string):void\r\n    {\r\n        const serialized:string = serializaer(content);\r\n        LocalStorage.Save(key,serialized)\r\n    }\r\n\r\n    public static Load(key:string):string|null\r\n    {\r\n        return window.localStorage.getItem(key);\r\n    }\r\n\r\n    public static LoadT<T>(key:string, deserializer:(o:string)=>T):T|null\r\n    {\r\n        const json = LocalStorage.Load(key);\r\n        if(json === null) return null;\r\n        try {\r\n            const parsed:T = deserializer(json);\r\n            return parsed;\r\n        } catch(error) {\r\n            console.log(error);\r\n            return null;\r\n        }\r\n    }\r\n}","import _ from \"lodash\";\r\nimport * as scryfall  from \"scryfall\";\r\nimport { LocalStorage } from \"../utils/LocalStorage\";\r\n\r\nexport class Card {\r\n  /* parsed from arena export */\r\n  public cardSet?:string\r\n  public cardNumber?:number\r\n\r\n  /* Scryfall data */\r\n  public cmc:number = Number.NaN;\r\n  public cardType:string = \"\";\r\n  public power:number = Number.NaN;\r\n  public toughness:number = Number.NaN;\r\n  public oracleText:string = \"\";\r\n  public manaCost:string = \"\";\r\n\r\n  public getLSKey():string \r\n  {\r\n    return \"Card|\" + this.name;\r\n  }\r\n\r\n  constructor(public name: string) { }\r\n\r\n  private static readonly cardRegEx = /([0-9]+)\\s?([^(]+)\\s?(\\([A-Z]{3}\\))?\\s?([0-9]+)?/\r\n  //EJ: 32 Mountain (M20) 276\r\n  static parseLine(cardStr:string):[number,Card|null] {\r\n    let matches = cardStr.trim().match(Card.cardRegEx)\r\n    if (matches === undefined || matches === null) {\r\n      return [0,null];\r\n    }\r\n    else {\r\n      let m = matches as RegExpMatchArray\r\n      if (m.length > 2) { //I only really need amount + name, set+code are just bonus\r\n        let copies = Number.parseInt(m[1])\r\n        let card = new Card(m[2].trim())\r\n        if(m.length > 3 && m[3] !== undefined) card.cardSet = m[3].replace(\"(\",\"\").replace(\")\",\"\")\r\n        if(m.length > 4 && m[4] !== undefined) card.cardNumber = Number.parseInt(m[4])\r\n        return [copies,card];\r\n        //return new Array<Card>(copies).fill(card)\r\n      }\r\n      else {\r\n        return [0,null]\r\n      }\r\n    }\r\n  }\r\n\r\n  static parseDeck(deckString:string):Array<Card> {\r\n    let lines = deckString.split('\\n')\r\n    return lines.flatMap(s => {\r\n      let [n,c] = Card.parseLine(s)\r\n      if(c instanceof Card) return new Array<Card>(n).fill(c)\r\n      else return []\r\n    })\r\n  }\r\n\r\n  //try and load the info from the cache, if we can't, then load the scryfall library\r\n  //for now just using scryfall\r\n  static getCardInfo():void {\r\n\r\n  }\r\n\r\n  static fetchCardInfo(c:Card):Promise<Card> {\r\n    return new Promise<Card>((resolve, reject) => {\r\n      \r\n      let cacheCard = LocalStorage.LoadT(c.getLSKey(), Card.fromJSON)\r\n      if(cacheCard == null) {\r\n        // console.log(\"Fetching\",c.name,\"data from scryfall\")\r\n        scryfall.getCardByName(c.name, true).then(res => {\r\n          //  console.log(\"fetched data for\",c.name,res)\r\n          let newCard = new Card(res.name)\r\n          newCard.cardSet = res.set.toUpperCase()\r\n          newCard.cardNumber = res.collector_number?Number.parseInt(res.collector_number):c.cardNumber\r\n          newCard.cardType = res.type_line\r\n          newCard.cmc = res.cmc\r\n          newCard.manaCost = res.mana_cost\r\n          newCard.power = res.power?Number.parseInt(res.power):Number.NaN\r\n          newCard.toughness = res.toughness?Number.parseInt(res.toughness):Number.NaN\r\n          newCard.oracleText = res.oracle_text||\"\"\r\n          // console.log(\"response to\",c,\"->\",res)\r\n          LocalStorage.SaveT(c.getLSKey(),newCard,Card.toJSON)\r\n          if(newCard.getLSKey() !== c.getLSKey()) LocalStorage.SaveT(newCard.getLSKey(),newCard,Card.toJSON)\r\n          resolve(newCard)\r\n        }, err => {\r\n          console.log(\"error fetching\",c,\"->\",err)\r\n          reject(err)\r\n        })\r\n      } else {\r\n        // console.log(\"Cached data for\",c.name,\"is\",cacheCard)\r\n        resolve(cacheCard)\r\n      }\r\n    });\r\n  }\r\n\r\n  static prefetchDeck(deckStr:string):Promise<Array<Card>> {\r\n    console.log(\"Card.prefetchDeck\")\r\n    let cards = _.uniqBy( Card.parseDeck(deckStr), c => c.name )\r\n    return Promise.all( cards.map(Card.fetchCardInfo) )\r\n  }\r\n\r\n  static toJSON(card:Card):string \r\n  {\r\n    return JSON.stringify(card);\r\n  }\r\n\r\n  static fromJSON(json:string):Card\r\n  {\r\n    const fakeCard = JSON.parse(json) as Card\r\n    let realCard = new Card(fakeCard.name)\r\n    Object.assign(realCard,fakeCard)\r\n    return realCard;\r\n  }\r\n}\r\n","import { GroupTest } from \"../models/GroupTest\"\r\nimport React, { useContext } from \"react\"\r\nimport TestComponent from \"./TestComponent\"\r\nimport { GroupType } from \"../definitions/enums\"\r\nimport { COLOR_ZERO, COLOR_HUND, HandlersContext } from \"../definitions/constants\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { DragItem } from \"../definitions/types\"\r\nimport { useDrag, useDrop } from \"react-dnd\"\r\nimport { Card } from \"../models/Card\"\r\n\r\nconst GroupTestComponent: React.FC<{test:GroupTest, allTests:Array<TestCase>, cards:Array<Card>}> = (props) => {\r\n\r\n    const context = useContext(HandlersContext)\r\n    \r\n    const [{isDragging},dragRef, dragPreview] = useDrag({\r\n        item:{\r\n            type:typeof TestCase, \r\n            id:props.test.id\r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n    const [{ isOver, canDrop }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            // console.log(\"SingleTest.drop\",item.id,\"into\",props.test.id)\r\n            if(monitor.didDrop()) return; //Checking if an earlier node caught it\r\n            // console.log(\"Drop uncaught so far, calling context\")\r\n            if(monitor.canDrop()) {\r\n                context.onDragDrop(item.id,props.test.id)\r\n            }\r\n        },\r\n        //No restrictions on singles, but groups cannot be dropped on a child item\r\n        canDrop: (item:DragItem) => {\r\n            //return item.id !== props.test.id && item.parentId !== props.test.id\r\n            return context.checkCanDrop(item.id , props.test.id)\r\n        },\r\n        collect: mon => ({\r\n          isOver: !!mon.isOver({shallow:true}),\r\n          canDrop: !!mon.canDrop(),\r\n        })\r\n    })\r\n  \r\n    return (\r\n      <div className={\"group\"+ (isOver?\" hovered\":\"\")+ (canDrop?\" canDrop\":\" noDrop\")+ (isDragging?\" dragging\":\"\") } ref={dropRef}>\r\n        <div className=\"line groupHeader\" ref={dragPreview}>\r\n          <input className=\"handle\" ref={dragRef} readOnly value={`${props.test.getPercent()}%`}  style={{backgroundColor:COLOR_ZERO.interpolateWith(COLOR_HUND,props.test.hits/props.test.tries).toCSS()}} />\r\n          <input className=\"fill\" value={props.test.name} onChange={(e) => context.onChangeGroupName(props.test.id,e.target.value)} placeholder=\"Group Name\" />\r\n          <input readOnly disabled value=\"for\" />\r\n          <select value={props.test.groupType} onChange={(e) => context.onChangeGroupType(props.test.id,e.target.value as GroupType)} >\r\n            <option value={GroupType.ALL}>ALL</option>\r\n            <option value={GroupType.ANY}>ANY</option>\r\n          </select>\r\n          <input readOnly disabled value=\"of:\" />\r\n        </div>\r\n        <div className=\"children\">\r\n        {props.test.getChildren(props.allTests).sort((a,b)=>a.id-b.id).map(ct => <TestComponent key={ct.id+\"_cmp\"} test={ct} allTests={props.allTests} cards={props.cards} />)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default GroupTestComponent","import { SingleTest } from \"../models/SingleTest\"\r\nimport React, { useContext } from \"react\"\r\nimport { CompareType, MatchType } from \"../definitions/enums\"\r\nimport { COLOR_ZERO, COLOR_HUND, HandlersContext } from \"../definitions/constants\"\r\nimport {useDrag,useDrop} from \"react-dnd\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { DragItem } from \"../definitions/types\"\r\nimport { Card } from \"../models/Card\"\r\nimport _ from \"lodash\"\r\n\r\n\r\nconst SingleTestComponent: React.FC<{test:SingleTest, cards:Array<Card>}> = (props) => {\r\n\r\n    const context = useContext(HandlersContext)\r\n    \r\n    const [{isDragging},dragRef, dragPreview] = useDrag({\r\n        item:{\r\n            type:typeof TestCase, \r\n            id:props.test.id\r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n    const [{ isOver, canDrop }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            // console.log(\"SingleTest.drop\",item.id,\"into\",props.test.id)\r\n            if(monitor.didDrop()) return; //Checking if an earlier node caught it\r\n            // console.log(\"Drop uncaught so far, calling context\")\r\n            if(monitor.canDrop()) {\r\n                context.onDragDrop(item.id,props.test.id)\r\n            }\r\n        },\r\n        //No restrictions on singles, but groups cannot be dropped on a child item\r\n        canDrop: (item:DragItem) => {\r\n            //return item.id !== props.test.id && item.parentId !== props.test.id\r\n            return context.checkCanDrop(item.id , props.test.id)\r\n        },\r\n        collect: mon => ({\r\n          isOver: !!mon.isOver({shallow:true}),\r\n          canDrop: !!mon.canDrop(),\r\n        })\r\n    })\r\n    \r\n    const opts_cardNames = props.cards.map(card => card.name).sort().map(val => {return {value:MatchType.Name+\":\"+val,text:val}})\r\n    const opts_cardTypes = _.uniq(props.cards.flatMap(c => c.cardType?.split(/[\\s/\\W]+/)).filter(w => w !== undefined).map(w => w as string)).map(val => {return {value:MatchType.CardType+\":\"+val,text:val}})\r\n    const opts_CMC = _.uniq(props.cards.map(c => c.cmc)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:MatchType.CMC+\":\"+val,text:`CMC = ${val}`}})\r\n    const opts_Power = _.uniq(props.cards.map(c => c.power)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:MatchType.Power+\":\"+val,text:`Power = ${val}`}})\r\n    const opts_Toughness = _.uniq(props.cards.map(c => c.toughness)).filter(val => val !== null && val !== undefined).sort().map(val => {return {value:MatchType.Toughness+\":\"+val,text:`Toughness = ${val}`}})\r\n    const selectedValue = props.test.match+\":\"+props.test.target\r\n\r\n    return (\r\n    <div className={\"single\" + (isOver?\" hovered\":\"\") + (canDrop?\" canDrop\":\" noDrop\") + (isDragging?\" dragging\":\"\") } ref={dropRef}>\r\n      <div className=\"line\" ref={dragPreview}>\r\n        \r\n        <input className=\"handle\" ref={dragRef} readOnly value={`${props.test.getPercent()}%`} style={{backgroundColor:COLOR_ZERO.interpolateWith(COLOR_HUND,props.test.hits/props.test.tries).toCSS()}} />\r\n        \r\n        <select value={selectedValue} className=\"fill\" onChange={(e) => {\r\n          const [match,value] = e.target.value.split(\":\")\r\n          const mType: MatchType = MatchType[match as keyof typeof MatchType];\r\n          console.log(match,\"==>\",mType)\r\n          context.onChangeSingleTarget(props.test.id,value, mType )\r\n        }} >\r\n          <option defaultChecked>Select a condition...</option>\r\n          <optgroup label=\"Cards with name...\">\r\n          {opts_cardNames.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with type...\">\r\n          {opts_cardTypes.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with CMC...\">\r\n          {opts_CMC.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with Power...\">\r\n          {opts_Power.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n          <optgroup label=\"Cards with Toughness...\">\r\n          {opts_Toughness.map(val => <option value={val.value} key={val.value}>{val.text}</option> )}\r\n          </optgroup>\r\n        </select>\r\n        {/* <input value={props.test.target} className=\"fill\" onChange={(e) => context.onChangeSingleTarget(props.test.id,e.target.value)} placeholder=\"Target Card\" /> */}\r\n\r\n\r\n        {/* https://react-select.com/ maybe? */}\r\n        <select value={props.test.compare} onChange={(e) => context.onChangeSingleCompare(props.test.id,e.target.value as CompareType)}>\r\n          <option value={CompareType.GT}>&ge;</option>\r\n          <option value={CompareType.EQ}>=</option>\r\n          <option value={CompareType.LT}>&le;</option>\r\n        </select>\r\n        <input type=\"number\" value={props.test.amount} onChange={(e) => context.onChangeSingleAmount(props.test.id,Number.parseInt(e.target.value))}/>\r\n        <input readOnly disabled value=\"by T\" />\r\n        <input type=\"number\" value={props.test.turn} onChange={(e) => context.onChangeTestTurn(props.test.id,Number.parseInt(e.target.value))}/>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  export default SingleTestComponent","import { GroupTest } from \"../models/GroupTest\"\r\nimport React from \"react\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { SingleTest } from \"../models/SingleTest\"\r\nimport GroupTestComponent from \"./GroupTestComponent\"\r\nimport SingleTestComponent from \"./SingleTestComponent\"\r\nimport { Card } from \"../models/Card\"\r\n\r\nconst TestComponent:React.FC<{test:TestCase, allTests:Array<TestCase>, cards:Array<Card>}> = (props) => {\r\n    if(props.test instanceof GroupTest) \r\n      return <GroupTestComponent test={props.test} allTests={props.allTests} cards={props.cards} />\r\n    else if(props.test instanceof SingleTest) \r\n      return <SingleTestComponent test={props.test} cards={props.cards} />\r\n    else return <div />\r\n  }\r\n\r\n  export default TestComponent","import React, {  } from \"react\"\r\nimport { useDrop } from \"react-dnd\";\r\nimport { TestCase } from \"../models/TestCase\";\r\nimport { DragItem } from \"../definitions/types\";\r\n\r\nconst TrashcanComponent: React.FC<{dropHandler:(id:number)=>void}> = (props) => {\r\n\r\n    const [{ isOver }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            props.dropHandler(item.id)\r\n        },\r\n        collect: mon => ({\r\n            isOver: !!mon.isOver({shallow:true})\r\n        })\r\n    })\r\n\r\n    return (\r\n    <div id=\"trash\" ref={dropRef} className={isOver?\" hovered\":\"\"} >Drop here to delete</div>\r\n    )\r\n}\r\n\r\nexport default TrashcanComponent;","import { useState } from \"react\";\r\nimport { LocalStorage } from \"./LocalStorage\";\r\n\r\n//Thanks to: https://usehooks.com/useLocalStorage/\r\n\r\nfunction useLocalStorage(key:string, initialValue:string):[string,(value:string)=>void] {\r\n  \r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {  \r\n        const item = LocalStorage.Load(key)\r\n        return item || initialValue;\r\n      } catch (error) {\r\n        return initialValue;\r\n      }\r\n  \r\n    });\r\n  \r\n    const setValue = (value:string) => {\r\n  \r\n      try {\r\n        const valueToStore = value;\r\n        setStoredValue(valueToStore);\r\n        //Potential upgrade: Define an ISerializable interface and receive and object of that interface\r\n        LocalStorage.Save(key,valueToStore);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n  \r\n    };\r\n    return [storedValue, setValue];\r\n  \r\n  }\r\n\r\nexport default useLocalStorage","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport _ from 'lodash'; //Only using it for _.shuffle\nimport {TestCase } from './models/TestCase';\nimport {Tests2JSON, JSON2Tests} from './definitions/utils';\nimport { Card } from './models/Card';\nimport { GroupTest } from './models/GroupTest';\nimport { SingleTest } from './models/SingleTest';\nimport TestComponent from './components/TestComponent';\nimport {TOTAL_RUNS, HandlersContext} from './definitions/constants'\nimport { TestType, GroupType, CompareType, MatchType } from './definitions/enums';\nimport { DndProvider } from 'react-dnd'\nimport MultiBackend from 'react-dnd-multi-backend';\nimport HTML5toTouch from 'react-dnd-multi-backend/dist/esm/HTML5toTouch';\nimport TrashcanComponent from './components/TrashcanComponent';\nimport useLocalStorage from './utils/useLocalStorage'\nimport AwesomeDebouncePromise from 'awesome-debounce-promise'\nimport useConstant from 'use-constant'\nimport {useAsync} from 'react-async-hook'\n\nconst deckString = `28 Mountain (M20) 276\n4 Terror of Mount Velus (THB) 295\n4 Purphoros, Bronze-Blooded (THB) 150\n4 Ilharg, the Raze-Boar (WAR) 133\n4 Cavalier of Flame (M20) 125\n4 Storm's Wrath (THB) 157\n4 Fires of Invention (ELD) 125\n4 Bonecrusher Giant (ELD) 115\n4 Drakuseth, Maw of Flames (M20) 136`\n\nconst json = [\n  { id: 6, type: TestType.Group, parent: 15, name: \"Curve\" },\n  { id: 1, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 1, turn: 1, compare: CompareType.GT },\n  { id: 2, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 2, turn: 2, compare: CompareType.GT },\n  { id: 3, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 3, turn: 3, compare: CompareType.GT },\n  { id: 4, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 4, turn: 4, compare: CompareType.GT },\n  { id: 5, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 5, turn: 5, compare: CompareType.GT },\n  { id: 14, type: TestType.Group, group: GroupType.ALL, parent: 15, name: \"Combo Pieces\" },\n  { id: 7, type: TestType.Single, turn: 4, target: \"Fires of Invention\", parent: 14 },\n  { id: 8, type: TestType.Single, turn: 5, target: \"Purphoros, Bronze-Blooded\", parent: 14 },\n  { id: 9, type: TestType.Single, turn: 5, target: \"Cavalier of Flame\", parent: 14 },\n  { id: 10, type: TestType.Group, group: GroupType.ANY, parent: 14, name: \"Any 1 extra\" },\n  { id: 11, type: TestType.Single, turn: 5, target: \"Terror of Mount Velus\", parent: 10 },\n  { id: 12, type: TestType.Single, turn: 5, target: \"Drakuseth, Maw of Flames\", parent: 10 },\n  { id: 13, type: TestType.Single, turn: 5, target: \"Ilharg, the Raze-Boar\", parent: 10 },\n  { id: 15, type: TestType.Group, group: GroupType.ALL, parent: null, name: \"Magical Xmas Land\" },\n]\n\nlet defaultTests: Array<TestCase> = json.map(o => {\n  if (o.type === TestType.Group) {\n\n    let test = new GroupTest(o.id)\n    if (typeof o.parent === \"number\")\n      test.parentId = o.parent as number;\n    if (o.group !== undefined)\n      test.groupType = o.group as GroupType\n\n    test.name = o.name;\n\n    return test;\n  } else {\n    let test = new SingleTest(o.id, o.target as string)\n\n    if (typeof o.parent === \"number\")\n      test.parentId = o.parent as number;\n    if (o.amount !== undefined)\n      test.amount = o.amount as number;\n    if (o.turn !== undefined)\n      test.turn = o.turn as number;\n    if (o.compare !== undefined)\n      test.compare = o.compare as CompareType;\n\n    return test;\n  }\n})\n\nconst App: React.FC = () => {\n\n  // console.log(\"Main App initializing\")\n  const [persistedDeck, persistDeck] = useLocalStorage(\"deck\",deckString)\n  const [persistedTests, persistTests] = useLocalStorage(\"tests\",Tests2JSON(defaultTests))\n  const [stateDeck, setDeck] = useState(persistedDeck)\n\n  const prefetchCards = async (deckString:string) => {\n    Card.prefetchDeck(stateDeck).then(cards => {\n      console.log(\"card prefetchDeck completed\")\n      setCards(cards)\n    })\n  }\n\n  const [stateCards, setCards] = useState(() => {\n    console.log(\"initial prefetchDec start\")\n    prefetchCards(stateDeck);\n    return [] as Array<Card>\n  })\n  const [stateTests,setTests] = useState(JSON2Tests(persistedTests))\n  // const [running,setRunning] = useState(false)\n  const [numOfRuns,setRuns] = useState(TOTAL_RUNS)\n  const [saved, setSaved] = useState(true)\n  \n  //TODO: Disable the run button while fetching card info\n\n  const debouncedPrefetch = useConstant(() =>\n    AwesomeDebouncePromise(prefetchCards, 500)\n  );\n  const debouncedPrefetchAsync = useAsync(debouncedPrefetch,[stateDeck])\n  \n  useEffect(()=>{\n      setSaved(false)\n  }, [stateTests,stateDeck])  \n\n  const updateTest = (id:number, transform:(test:TestCase) => void) =>\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id)  transform(t); \n      return t;\n      }))\n  }\n  const updateSingleTest = (id:number, transform:(test:SingleTest) => void) =>\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id && t instanceof SingleTest) transform(t); \n      return t;\n      }))\n  }\n  const updateGroupTest = (id:number, transform:(test:GroupTest) => void) =>\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id && t instanceof GroupTest) transform(t); \n      return t;\n      }))\n  }\n\n  const onChangeTestTurn = (id:number,turn:number) => updateSingleTest(id, t => t.turn = turn)\n  const onChangeSingleTarget = (id:number,target:string,match?:MatchType) => updateSingleTest(id, t => {console.log(id,target,match);t.target = target; t.match = match?match:t.match})\n  const onChangeGroupName = (id:number,name:string) => updateGroupTest(id, t => t.name = name)\n  const onChangeGroupType = (id:number,group:GroupType) => updateGroupTest(id, t => t.groupType = group)\n  const onChangeSingleCompare = (id:number,compare:CompareType) => updateSingleTest(id,t => t.compare = compare)\n  const onChangeSingleAmount = (id:number,amount:number) => updateSingleTest(id, t => t.amount = amount)\n  const checkCanDrop = (draggedTestId:number,droppedOnTestId:number) => {\n    if(draggedTestId === droppedOnTestId) {\n      return false;\n    }\n\n    const draggedTest = stateTests.find(t => t.id === draggedTestId)\n    const droppedOnTest = stateTests.find(t => t.id === droppedOnTestId)\n    if(draggedTest instanceof TestCase && droppedOnTest instanceof TestCase)\n    {\n      if(draggedTest.parentId !== undefined && draggedTest.parentId === droppedOnTest.id) {\n        return false;\n      }\n\n      //If dragged and dropped are the only children of the same parent, we would create an identical group, so no need\n      if(draggedTest.parentId !== undefined && draggedTest.parentId === droppedOnTest.parentId) {\n        let parentTest = stateTests.find(t => t.id === draggedTest.parentId)\n        if(parentTest instanceof GroupTest && parentTest.getChildren.length === 2)\n          return false;\n      }\n\n      //if the dragged test is a Group, we need to check we don't drop him inside one of his children\n      if(draggedTest instanceof GroupTest)\n      {\n        const descendants = draggedTest.getAllDescendants(stateTests);\n        if(descendants.some(d => d.id === droppedOnTestId)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n  const onDragDrop = (draggedTestId:number,droppedOnTestId:number) => {\n    //Invalid drops are being dropped into the element immediatly above, which I believe is the first valid drop target\n    console.log(\"Handlers\",\"Dropped\",draggedTestId,\"into\",droppedOnTestId)\n    if(checkCanDrop(draggedTestId,droppedOnTestId) === false) {\n      console.log(\"Invalid drop\")\n      return;\n    }\n\n    // console.log(\"App.onDragDrop\",draggedTestId,droppedOnTestId)\n    const draggedTest = stateTests.find(t => t.id === draggedTestId)\n    const droppedOnTest = stateTests.find(t => t.id === droppedOnTestId)\n    if(draggedTest instanceof TestCase && droppedOnTest instanceof TestCase)\n    {\n      //In both scenarios, the dragged test has a new parent\n      if(draggedTest.parentId !== undefined) {\n        let draggedTestParent = stateTests.find(t => t.id === draggedTest.parentId)\n        if(draggedTestParent instanceof GroupTest) {\n          if(draggedTestParent.getChildren(stateTests).length === 1) { //If it was the only child, we remove the parent from the list\n            setTests(prevTests => prevTests.filter(t => t.id !== draggedTest.parentId))\n          } \n        }\n      }\n\n      //Case A: Drop Single/Group on Single => Create a group (with parent = droppedOn.parent), and set both single tests parent to the new group\n      if(droppedOnTest instanceof SingleTest)\n      {\n        const newGroup = new GroupTest(1 + Math.max(...stateTests.map(t => t.id)) )\n        \n        newGroup.parentId = droppedOnTest.parentId\n        setTests(prevTests => [...prevTests,newGroup])\n        updateTest(draggedTestId, t => t.parentId = newGroup.id)\n        updateTest(droppedOnTestId, t => t.parentId = newGroup.id)\n      }\n\n      //Case B: Drop Single/Group on Group => Set the parent for the dragged item to the dropped's ID\n      if(droppedOnTest instanceof GroupTest)\n      {\n        updateTest(draggedTestId, t => t.parentId = droppedOnTest.id)\n      }\n    }\n  }\n\n  const onTrashDrop = (id:number) => {\n    //deleting the whole thing if it's a group, there are arguments for deleting just the wrapper and ungrouping the children\n    const deletedTest = stateTests.find(t => t.id === id)\n    if(deletedTest instanceof SingleTest) {\n      setTests(prevTests => prevTests.filter(t => t.id !== deletedTest.id))\n    }\n    else if(deletedTest instanceof GroupTest) {\n      const allChildrenIDs = deletedTest.getAllDescendants(stateTests).map(t => t.id)\n      const allDeletedIDs = [deletedTest.id, ...allChildrenIDs]\n      setTests(prevTests => prevTests.filter(t => allDeletedIDs.includes(t.id) === false ))\n    }\n  }\n\n  const handlers = {\n    onChangeTestTurn:onChangeTestTurn,\n    onChangeSingleTarget:onChangeSingleTarget,\n    onChangeGroupName:onChangeGroupName,\n    onChangeGroupType:onChangeGroupType,\n    onChangeSingleCompare:onChangeSingleCompare,\n    onChangeSingleAmount:onChangeSingleAmount,\n    onDragDrop:onDragDrop,\n    checkCanDrop:checkCanDrop\n  }\n  const getRootTests = () => { return stateTests.filter(t => t.parentId == null)  }\n  const handleClickAdd = () => setTests(prevTests => [...prevTests, new SingleTest(1 + Math.max(0, ...prevTests.map(t => t.id)), \"\")])\n  const handleClickRun = () => runSimAsync.execute()\n  const handleSave = () => {\n    persistDeck(stateDeck)\n    persistTests(Tests2JSON(stateTests))\n    setSaved(true)\n  }\n\n  const runSim = async () => {\n    console.log(\"runSim\",\"start\")\n    console.log(stateCards)\n    let newTests = TestCase.clone(stateTests)\n\n    let rootTests: Array<TestCase> = newTests.filter(t => t.parentId == null) \n    let deck = Card.parseDeck(stateDeck).flatMap(deck => {return stateCards.find(sc => sc.name === deck.name)||[] })\n    for (let i = 0; i < TOTAL_RUNS; i++) {\n      let shuffled = _.shuffle(deck);\n      rootTests.forEach(t => t.IsTrue(shuffled, newTests))\n    }\n\n    setTests(newTests)\n    console.log(\"runSim\",\"end\")\n  }\n  const runSimAsync = useAsync(runSim, [])\n\n\n  //Handle the deck just as a big string for the app, and only parse it as a deck when we click run\n  //we can try and pre-fetch the card info in the background maybe?\n\n  //https://blog.axlight.com/posts/how-i-developed-react-hooks-for-web-workers/\n  //To run the sim as a background process\n\n  return (\n    <div className=\"App\" style={{ \"textAlign\": \"left\" }}>\n      <div className=\"header\">\n      {/* <ul className=\"nav nav-pills\">\n        <li role=\"presentation\" className=\"dropdown\">\n          <a className=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Actions <span className=\"caret\"></span>\n          </a>\n          <ul className=\"dropdown-menu\">\n            ...\n          </ul>\n        </li>\n        <li role=\"presentation\"><a href=\"#\">?</a></li>\n      </ul> */}\n      </div>\n      <div className=\"content\">\n        <div  id=\"deck\">\n          <div className=\"actions line\">\n          <button className=\"left fill run\" onClick={handleClickRun} disabled={debouncedPrefetchAsync.loading||runSimAsync.loading} >RUN</button>\n          <input type=\"number\" value={numOfRuns} onChange={e => setRuns(Number.parseInt(e.target.value))} />\n          <button className=\"right fill run\" onClick={handleClickRun} disabled={debouncedPrefetchAsync.loading||runSimAsync.loading} >times</button>\n          <div className=\"horizontalSpacer\" />\n          <button className=\"add fill\" onClick={handleClickAdd}>Add Condition</button>\n          </div>\n          \n          <em>Deck</em>\n          <textarea value={stateDeck} onChange={e => {setDeck(e.target.value); debouncedPrefetchAsync.execute(e.target.value);}} />\n          <div className=\"line\">\n            <button id=\"save\" disabled={saved} onClick={handleSave}>Save</button>\n             <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n             <TrashcanComponent dropHandler={onTrashDrop} />\n             </DndProvider>\n          </div>\n        </div>\n        \n        <HandlersContext.Provider value={handlers}>\n        <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n        <div id=\"tests\">\n          {getRootTests().sort((a,b) => a.id - b.id).map(t => <TestComponent key={t.id + \"_tst\"} test={t} allTests={stateTests} cards={stateCards} />)}\n        </div>\n        </DndProvider>\n        </HandlersContext.Provider>\n        \n      </div>\n      <div className=\"footer\" />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
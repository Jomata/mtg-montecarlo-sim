{"version":3,"sources":["definitions/enums.tsx","models/TestCase.tsx","models/RGB.tsx","definitions/constants.tsx","models/SingleTest.tsx","models/GroupTest.tsx","definitions/utils.tsx","models/Card.tsx","components/GroupTestComponent.tsx","components/SingleTestComponent.tsx","components/TestComponent.tsx","components/TrashcanComponent.tsx","useLocalStorage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TestType","GroupType","CompareType","MatchType","TestCase","id","testType","hits","tries","parentId","deck","allTests","result","this","runTest","toFixed","tests","map","t","clone","RGB","red","green","blue","another","percent","COLOR_ZERO","COLOR_HUND","HandlersContext","React","createContext","onChangeTestTurn","turn","onChangeGroupName","name","onChangeGroupType","group","onChangeSingleTarget","target","onChangeSingleCompare","compare","onChangeSingleAmount","amount","onDragDrop","draggedTestId","droppedOnTestId","checkCanDrop","SingleTest","Single","match","Name","GT","EQ","LT","hand","slice","matches","filter","c","includes","length","GroupTest","Group","groupType","ALL","TestSuite","undefined","childrenResults","getChildren","IsTrue","ANY","some","r","every","myChildren","grandChildren","flatMap","ch","getAllDescendants","Tests2JSON","JSON","stringify","JSON2Tests","json","parse","pt","newTest","Object","assign","Card","deckString","split","jstr","trim","m","copies","Number","parseInt","card","Array","fill","GroupTestComponent","props","context","useContext","useDrag","item","type","test","collect","monitor","isDragging","dragRef","dragPreview","useDrop","accept","drop","didDrop","canDrop","mon","isOver","shallow","dropRef","className","ref","readOnly","value","getPercent","style","backgroundColor","interpolateWith","toCSS","onChange","e","placeholder","disabled","sort","a","b","ct","key","SingleTestComponent","TestComponent","TrashcanComponent","dropHandler","useLocalStorage","initialValue","useState","window","localStorage","getItem","error","storedValue","setStoredValue","valueToStore","setItem","console","log","defaultTests","parent","o","App","persistedDeck","persistDeck","persistedTests","persistTests","stateDeck","setDeck","stateTests","setTests","running","setRunning","numOfRuns","setRuns","saved","setSaved","roundTrip","updateTest","transform","updateSingleTest","updateGroupTest","useEffect","draggedTest","find","droppedOnTest","parentTest","d","handlers","draggedTestParent","prevTests","newGroup","Math","max","handleClickRun","newTests","rootTests","parseText","i","shuffled","_","shuffle","forEach","runSim","onClick","DndProvider","backend","Backend","deletedTest","allChildrenIDs","allDeletedIDs","Provider","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f781c5f.chunk.js","sourcesContent":["\r\nexport enum TestType { Single, Group }\r\n\r\nexport enum GroupType { ALL = \"and\", ANY = \"or\" }\r\n\r\nexport enum CompareType { GT = \">\", EQ = \"=\", LT = \"<\" }\r\n\r\nexport enum MatchType { Name }","import { TestType } from '../definitions/enums';\r\nimport { Card } from \"./Card\";\r\n\r\nexport abstract class TestCase {\r\n  public hits: number = 0;\r\n  public tries: number = 0;\r\n  public parentId?: number;\r\n  constructor(public id: number, public testType: TestType) {\r\n  }\r\n  protected abstract runTest(deck: Array<Card>, allTests:Array<TestCase>): boolean;\r\n  public IsTrue(deck: Array<Card>, allTests:Array<TestCase>): boolean {\r\n    let result = this.runTest(deck, allTests);\r\n    // console.log(\"Test ID\",this.id,\"is at\",this.hits,\"/\",this.tries)\r\n    if (result)\r\n      this.hits++;\r\n    this.tries++;\r\n    // console.log(\"Test ID\",this.id,\"is at\",this.hits,\"/\",this.tries)\r\n    return result;\r\n  }\r\n  public getPercent(): string {\r\n    if(this.tries > 0)\r\n        return (100 * this.hits / this.tries).toFixed(1);\r\n    else\r\n        return \"??\"\r\n  }\r\n  abstract clone():TestCase;\r\n  \r\n  public static clone(tests:Array<TestCase>):Array<TestCase>\r\n  {\r\n      let clones = tests.map(t => t.clone())\r\n      return clones;\r\n  }\r\n}","export class RGB {\r\n  constructor(public red: number, public green: number, public blue: number) { }\r\n  public interpolateWith(another: RGB, percent: number) {\r\n    //making percent from 0 to 1 if it's > 1\r\n    if (percent > 1)\r\n      percent /= 100;\r\n    let resultRed = this.red + percent * (another.red - this.red);\r\n    let resultGreen = this.green + percent * (another.green - this.green);\r\n    let resultBlue = this.blue + percent * (another.blue - this.blue);\r\n    return new RGB(resultRed, resultGreen, resultBlue);\r\n  }\r\n  public toCSS() {\r\n    return `rgb(${this.red},${this.green},${this.blue})`;\r\n  }\r\n}\r\n","import { RGB } from \"../models/RGB\";\r\nimport React from \"react\";\r\nimport { CompareType, GroupType } from \"./enums\";\r\n\r\nexport const INITIAL_DRAW: number = 6;\r\nexport const TOTAL_RUNS: number = 9999;\r\n\r\nexport const COLOR_ZERO = new RGB(255, 0, 0)\r\nexport const COLOR_HUND = new RGB(0, 255, 0)\r\n\r\nexport const HandlersContext = React.createContext({\r\n    onChangeTestTurn:(id:number,turn:number) => {},\r\n    onChangeGroupName:(id:number,name:string) => {},\r\n    onChangeGroupType:(id:number,group:GroupType) => {},\r\n    onChangeSingleTarget:(id:number,target:string) => {},\r\n    onChangeSingleCompare:(id:number,compare:CompareType) => {},\r\n    onChangeSingleAmount:(id:number,amount:number) => {},\r\n    onDragDrop:(draggedTestId:number,droppedOnTestId:number) => {},\r\n    checkCanDrop:(draggedTestId:number,droppedOnTestId:number):boolean => true\r\n  })","import {TestCase} from '../models/TestCase';\r\nimport { Card } from './Card';\r\nimport { MatchType, CompareType, TestType } from '../definitions/enums';\r\nimport {INITIAL_DRAW} from '../definitions/constants'\r\nexport class SingleTest extends TestCase {\r\n    \r\n  public turn: number = 1;\r\n  public match: MatchType = MatchType.Name;\r\n  public compare: CompareType = CompareType.GT;\r\n  public amount: number = 1;\r\n  constructor(id: number, public target: string) {\r\n    super(id, TestType.Single);\r\n  }\r\n  clone(): TestCase {\r\n    let clone = new SingleTest(this.id, this.target)\r\n    clone.parentId = this.parentId\r\n    clone.turn = this.turn\r\n    clone.match = this.match\r\n    clone.compare = this.compare\r\n    clone.amount = this.amount\r\n    return clone;\r\n  }\r\n  public toString() {\r\n    switch (this.compare) {\r\n      case CompareType.EQ:\r\n        return `${this.amount} ${this.target} by T${this.turn}`;\r\n      case CompareType.GT:\r\n        return `${this.amount}+ ${this.target} by T${this.turn}`;\r\n      case CompareType.LT:\r\n        return `${this.amount}- ${this.target} by T${this.turn}`;\r\n    }\r\n  }\r\n  protected runTest(deck: Array<Card>): boolean {\r\n    //let result = 10 * Math.random() > this.id\r\n    // console.log(\"Single ID\",this.id,result)\r\n    let hand = deck.slice(0, INITIAL_DRAW + this.turn);\r\n    let result: boolean = false;\r\n    let matches: number = 0;\r\n    switch (this.match) {\r\n      case MatchType.Name:\r\n        matches = hand.filter(c => c.name.includes(this.target)).length;\r\n        break;\r\n    }\r\n    switch (this.compare) {\r\n      case CompareType.EQ:\r\n        result = matches === this.amount;\r\n        break;\r\n      case CompareType.GT:\r\n        result = matches >= this.amount;\r\n        break;\r\n      case CompareType.LT:\r\n        result = matches <= this.amount;\r\n        break;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {TestCase} from '../models/TestCase';\r\nimport { Card } from './Card';\r\nimport { GroupType, TestType } from '../definitions/enums';\r\n///Idea: The Group test could also have a target amount & comparison type, so you can check that out of your sub-tests, you get >0, exactly 1, >1, etc.\r\nexport class GroupTest extends TestCase {\r\n//   public getChildren: Array<TestCase> = [];\r\n  public groupType: GroupType = GroupType.ALL;\r\n  public name?: string;\r\n  constructor(id: number) {\r\n    super(id, TestType.Group);\r\n  }\r\n  clone(): TestCase {\r\n      let clone = new GroupTest(this.id)\r\n      clone.parentId = this.parentId\r\n//   clone.children = this.children.map(c => c.clone())\r\n      clone.groupType = this.groupType\r\n      clone.name = this.name\r\n      return clone\r\n  }\r\n  public getChildren(TestSuite:Array<TestCase>):Array<TestCase> {\r\n    return TestSuite.filter(t => t.parentId === this.id);\r\n  }\r\n\r\n  public toString() {\r\n    if (this.name !== undefined) {\r\n      return `${this.name} [${this.groupType}]`;\r\n    }\r\n    else {\r\n      return `Group ${this.id} [${this.groupType}]`;\r\n    }\r\n  }\r\n  protected runTest(deck: Array<Card>, allTests:Array<TestCase>): boolean {\r\n    let childrenResults = this.getChildren(allTests).map(c => c.IsTrue(deck, allTests));\r\n    var result: boolean;\r\n    if (this.groupType === GroupType.ANY) {\r\n      result = childrenResults.some(r => r);\r\n    }\r\n    else {\r\n      result = childrenResults.every(r => r);\r\n    }\r\n    // console.log(\"Group ID\",this.id,result)\r\n    return result;\r\n  }\r\n\r\n  public getAllDescendants(TestSuite:Array<TestCase>): Array<TestCase> {\r\n    const myChildren = this.getChildren(TestSuite);\r\n    const groupChildren = myChildren.flatMap(c => {\r\n        if(c instanceof GroupTest)\r\n            return [c as GroupTest]\r\n        else return []\r\n    })\r\n    const grandChildren = groupChildren.flatMap(ch => ch.getAllDescendants(TestSuite))\r\n\r\n    return [...myChildren,...grandChildren]\r\n  } \r\n}\r\n","import { TestCase } from \"../models/TestCase\";\r\nimport { SingleTest } from \"../models/SingleTest\";\r\nimport { TestType } from \"./enums\";\r\nimport { GroupTest } from \"../models/GroupTest\";\r\n\r\nexport function Tests2JSON(tests:Array<TestCase>):string\r\n  {\r\n    return JSON.stringify(tests)\r\n  }\r\n\r\nexport function JSON2Tests(json:string):Array<TestCase>\r\n  {\r\n      //JSON.parse returns _objects_ with the same properties as the classes we want\r\n      //So we need to transform those objets to actual class instances\r\n      let pseudoTests:Array<TestCase> = JSON.parse(json);\r\n      let realTests:Array<TestCase> = pseudoTests.flatMap(pt => {\r\n          let newTest:TestCase\r\n          if(pt.testType === TestType.Single) {\r\n              newTest = new SingleTest(pt.id,\"\")\r\n          } else if (pt.testType === TestType.Group) {\r\n              newTest = new GroupTest(pt.id)\r\n          } else {\r\n              return []\r\n          }\r\n\r\n          Object.assign(newTest,pt)\r\n          return [newTest];\r\n      })\r\n      \r\n    return realTests\r\n  }","export class Card {\r\n  constructor(public name: string) { }\r\n\r\n  static parseText(deckString:string):Array<Card> {\r\n    let lines = deckString.split('\\n')\r\n    return lines.flatMap(jstr => {\r\n        let matches = jstr.trim().match(/([0-9]+)[\\s]+([\\S\\s]+)/)\r\n        if (matches === undefined) {\r\n          return [];\r\n        }\r\n        else {\r\n          let m = matches as RegExpMatchArray\r\n          if (m.length === 3) {\r\n            let copies = Number.parseInt(m[1])\r\n            let card = new Card(m[2])\r\n            return new Array<Card>(copies).fill(card)\r\n          }\r\n          else {\r\n            return []\r\n          }\r\n        }\r\n      })\r\n  }\r\n}\r\n","import { GroupTest } from \"../models/GroupTest\"\r\nimport React, { useContext } from \"react\"\r\nimport TestComponent from \"./TestComponent\"\r\nimport { GroupType } from \"../definitions/enums\"\r\nimport { COLOR_ZERO, COLOR_HUND, HandlersContext } from \"../definitions/constants\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { DragItem } from \"../definitions/types\"\r\nimport { useDrag, useDrop } from \"react-dnd\"\r\n\r\nconst GroupTestComponent: React.FC<{test:GroupTest, allTests:Array<TestCase>}> = (props) => {\r\n\r\n    const context = useContext(HandlersContext)\r\n    \r\n    const [{isDragging},dragRef, dragPreview] = useDrag({\r\n        item:{\r\n            type:typeof TestCase, \r\n            id:props.test.id\r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n    const [{ isOver, canDrop }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            // console.log(\"SingleTest.drop\",item.id,\"into\",props.test.id)\r\n            if(monitor.didDrop()) return; //Checking if an earlier node caught it\r\n            // console.log(\"Drop uncaught so far, calling context\")\r\n            if(monitor.canDrop()) {\r\n                context.onDragDrop(item.id,props.test.id)\r\n            }\r\n        },\r\n        //No restrictions on singles, but groups cannot be dropped on a child item\r\n        canDrop: (item:DragItem) => {\r\n            //return item.id !== props.test.id && item.parentId !== props.test.id\r\n            return context.checkCanDrop(item.id , props.test.id)\r\n        },\r\n        collect: mon => ({\r\n          isOver: !!mon.isOver({shallow:true}),\r\n          canDrop: !!mon.canDrop(),\r\n        })\r\n    })\r\n  \r\n    return (\r\n      <div className={\"group\"+ (isOver?\" hovered\":\"\")+ (canDrop?\" canDrop\":\" noDrop\")+ (isDragging?\" dragging\":\"\") } ref={dropRef}>\r\n        <div className=\"line groupHeader\" ref={dragPreview}>\r\n          <input className=\"handle\" ref={dragRef} readOnly value={`${props.test.getPercent()}%`}  style={{backgroundColor:COLOR_ZERO.interpolateWith(COLOR_HUND,props.test.hits/props.test.tries).toCSS()}} />\r\n          <input className=\"fill\" value={props.test.name} onChange={(e) => context.onChangeGroupName(props.test.id,e.target.value)} placeholder=\"Group Name\" />\r\n          <input readOnly disabled value=\"for\" />\r\n          <select value={props.test.groupType} onChange={(e) => context.onChangeGroupType(props.test.id,e.target.value as GroupType)} >\r\n            <option value={GroupType.ALL}>ALL</option>\r\n            <option value={GroupType.ANY}>ANY</option>\r\n          </select>\r\n          <input readOnly disabled value=\"of:\" />\r\n        </div>\r\n        <div className=\"children\">\r\n        {props.test.getChildren(props.allTests).sort((a,b)=>a.id-b.id).map(ct => <TestComponent key={ct.id+\"_cmp\"} test={ct} allTests={props.allTests} />)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default GroupTestComponent","import { SingleTest } from \"../models/SingleTest\"\r\nimport React, { useContext } from \"react\"\r\nimport { CompareType } from \"../definitions/enums\"\r\nimport { COLOR_ZERO, COLOR_HUND, HandlersContext } from \"../definitions/constants\"\r\nimport {useDrag,useDrop} from \"react-dnd\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { DragItem } from \"../definitions/types\"\r\n\r\n\r\nconst SingleTestComponent: React.FC<{test:SingleTest}> = (props) => {\r\n\r\n    const context = useContext(HandlersContext)\r\n    \r\n    const [{isDragging},dragRef, dragPreview] = useDrag({\r\n        item:{\r\n            type:typeof TestCase, \r\n            id:props.test.id\r\n        },\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n    const [{ isOver, canDrop }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            // console.log(\"SingleTest.drop\",item.id,\"into\",props.test.id)\r\n            if(monitor.didDrop()) return; //Checking if an earlier node caught it\r\n            // console.log(\"Drop uncaught so far, calling context\")\r\n            if(monitor.canDrop()) {\r\n                context.onDragDrop(item.id,props.test.id)\r\n            }\r\n        },\r\n        //No restrictions on singles, but groups cannot be dropped on a child item\r\n        canDrop: (item:DragItem) => {\r\n            //return item.id !== props.test.id && item.parentId !== props.test.id\r\n            return context.checkCanDrop(item.id , props.test.id)\r\n        },\r\n        collect: mon => ({\r\n          isOver: !!mon.isOver({shallow:true}),\r\n          canDrop: !!mon.canDrop(),\r\n        })\r\n    })\r\n\r\n    return (\r\n    <div className={\"single\" + (isOver?\" hovered\":\"\") + (canDrop?\" canDrop\":\" noDrop\") + (isDragging?\" dragging\":\"\") } ref={dropRef}>\r\n      <div className=\"line\" ref={dragPreview}>\r\n        \r\n        <input className=\"handle\" ref={dragRef} readOnly value={`${props.test.getPercent()}%`} style={{backgroundColor:COLOR_ZERO.interpolateWith(COLOR_HUND,props.test.hits/props.test.tries).toCSS()}} />\r\n        <input value={props.test.target} className=\"fill\" onChange={(e) => context.onChangeSingleTarget(props.test.id,e.target.value)} placeholder=\"Target Card\" />\r\n        {/* https://react-select.com/ maybe? */}\r\n        <select value={props.test.compare} onChange={(e) => context.onChangeSingleCompare(props.test.id,e.target.value as CompareType)}>\r\n          <option value={CompareType.GT}>&ge;</option>\r\n          <option value={CompareType.EQ}>=</option>\r\n          <option value={CompareType.LT}>&le;</option>\r\n        </select>\r\n        <input type=\"number\" value={props.test.amount} onChange={(e) => context.onChangeSingleAmount(props.test.id,Number.parseInt(e.target.value))}/>\r\n        <input readOnly disabled value=\"by T\" />\r\n        <input type=\"number\" value={props.test.turn} onChange={(e) => context.onChangeTestTurn(props.test.id,Number.parseInt(e.target.value))}/>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  export default SingleTestComponent","import { GroupTest } from \"../models/GroupTest\"\r\nimport React from \"react\"\r\nimport { TestCase } from \"../models/TestCase\"\r\nimport { SingleTest } from \"../models/SingleTest\"\r\nimport GroupTestComponent from \"./GroupTestComponent\"\r\nimport SingleTestComponent from \"./SingleTestComponent\"\r\n\r\nconst TestComponent:React.FC<{test:TestCase, allTests:Array<TestCase>}> = (props) => {\r\n    if(props.test instanceof GroupTest) \r\n      return <GroupTestComponent test={props.test} allTests={props.allTests}  />\r\n    else if(props.test instanceof SingleTest) \r\n      return <SingleTestComponent test={props.test}  />\r\n    else return <div />\r\n  }\r\n\r\n  export default TestComponent","import React, {  } from \"react\"\r\nimport { useDrop } from \"react-dnd\";\r\nimport { TestCase } from \"../models/TestCase\";\r\nimport { DragItem } from \"../definitions/types\";\r\n\r\nconst TrashcanComponent: React.FC<{dropHandler:(id:number)=>void}> = (props) => {\r\n\r\n    const [{ isOver }, dropRef] = useDrop({\r\n        accept:[typeof TestCase],\r\n        drop: (item:DragItem,monitor) => {\r\n            props.dropHandler(item.id)\r\n        },\r\n        collect: mon => ({\r\n            isOver: !!mon.isOver({shallow:true})\r\n        })\r\n    })\r\n\r\n    return (\r\n    <div id=\"trash\" ref={dropRef} className={isOver?\" hovered\":\"\"} >Drop here to delete</div>\r\n    )\r\n}\r\n\r\nexport default TrashcanComponent;","import { useState } from \"react\";\r\n\r\n//Thanks to: https://usehooks.com/useLocalStorage/\r\n\r\nfunction useLocalStorage(key:string, initialValue:string):[string,(value:string)=>void] {\r\n  \r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {  \r\n        const item = window.localStorage.getItem(key);\r\n        return item || initialValue;\r\n      } catch (error) {\r\n        return initialValue;\r\n      }\r\n  \r\n    });\r\n  \r\n    const setValue = (value:string) => {\r\n  \r\n      try {\r\n        const valueToStore = value;\r\n        setStoredValue(valueToStore);\r\n        //Potential upgrade: Define an ISerializable interface and receive and object of that interface\r\n        localStorage.setItem(key, valueToStore);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n  \r\n    };\r\n    return [storedValue, setValue];\r\n  \r\n  }\r\n\r\nexport default useLocalStorage","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport _ from 'lodash'; //Only using it for _.shuffle\nimport {TestCase } from './models/TestCase';\nimport {Tests2JSON, JSON2Tests} from './definitions/utils';\nimport { Card } from './models/Card';\nimport { GroupTest } from './models/GroupTest';\nimport { SingleTest } from './models/SingleTest';\nimport TestComponent from './components/TestComponent';\nimport {TOTAL_RUNS, HandlersContext} from './definitions/constants'\nimport { TestType, GroupType, CompareType } from './definitions/enums';\nimport { DndProvider } from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\nimport TrashcanComponent from './components/TrashcanComponent';\nimport useLocalStorage from './useLocalStorage'\n\nconst deckString = `28 Mountain (M20) 276\n4 Terror of Mount Velus (THB) 295\n4 Purphoros, Bronze-Blooded (THB) 150\n4 Ilharg, the Raze-Boar (WAR) 133\n4 Cavalier of Flame (M20) 125\n4 Storm's Wrath (THB) 157\n4 Fires of Invention (ELD) 125\n4 Bonecrusher Giant (ELD) 115\n4 Drakuseth, Maw of Flames (M20) 136`\n\nconst json = [\n  { id: 6, type: TestType.Group, parent: 15, name: \"Curve\" },\n  { id: 1, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 1, turn: 1, compare: CompareType.GT },\n  { id: 2, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 2, turn: 2, compare: CompareType.GT },\n  { id: 3, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 3, turn: 3, compare: CompareType.GT },\n  { id: 4, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 4, turn: 4, compare: CompareType.GT },\n  { id: 5, type: TestType.Single, target: \"Mountain\", parent: 6, amount: 5, turn: 5, compare: CompareType.GT },\n  { id: 14, type: TestType.Group, group: GroupType.ALL, parent: 15, name: \"Combo Pieces\" },\n  { id: 7, type: TestType.Single, turn: 4, target: \"Fires of Invention\", parent: 14 },\n  { id: 8, type: TestType.Single, turn: 5, target: \"Purphoros\", parent: 14 },\n  { id: 9, type: TestType.Single, turn: 5, target: \"Cavalier of Flame\", parent: 14 },\n  { id: 10, type: TestType.Group, group: GroupType.ANY, parent: 14, name: \"Any 1 extra\" },\n  { id: 11, type: TestType.Single, turn: 5, target: \"Terror\", parent: 10 },\n  { id: 12, type: TestType.Single, turn: 5, target: \"Drakuseth\", parent: 10 },\n  { id: 13, type: TestType.Single, turn: 5, target: \"Ilharg\", parent: 10 },\n  { id: 15, type: TestType.Group, group: GroupType.ALL, parent: null, name: \"Magical Xmas Land\" },\n]\n\nlet defaultTests: Array<TestCase> = json.map(o => {\n  if (o.type === TestType.Group) {\n\n    let test = new GroupTest(o.id)\n    if (typeof o.parent === \"number\")\n      test.parentId = o.parent as number;\n    if (o.group !== undefined)\n      test.groupType = o.group as GroupType\n\n    test.name = o.name;\n\n    return test;\n  } else {\n    let test = new SingleTest(o.id, o.target as string)\n\n    if (typeof o.parent === \"number\")\n      test.parentId = o.parent as number;\n    if (o.amount !== undefined)\n      test.amount = o.amount as number;\n    if (o.turn !== undefined)\n      test.turn = o.turn as number;\n    if (o.compare !== undefined)\n      test.compare = o.compare as CompareType;\n\n    return test;\n  }\n})\n\nconst App: React.FC = () => {\n\n  // console.log(\"Main App initializing\")\n  const [persistedDeck, persistDeck] = useLocalStorage(\"deck\",deckString)\n  const [persistedTests, persistTests] = useLocalStorage(\"tests\",Tests2JSON(defaultTests))\n\n  const [stateDeck, setDeck] = useState(persistedDeck)\n  const [stateTests,setTests] = useState(JSON2Tests(persistedTests))\n  const [running,setRunning] = useState(false)\n  const [numOfRuns,setRuns] = useState(TOTAL_RUNS)\n  const [saved, setSaved] = useState(true)\n\n  console.log(defaultTests , Tests2JSON(defaultTests))\n  let roundTrip = JSON2Tests(Tests2JSON(stateTests))\n  console.log(roundTrip)\n\n  // useEffect is causing the initial render to happen twice\n  // there's a setState somewhere after this that shouldn't be there\n  useEffect(()=>{\n      setSaved(false)\n  }, [stateTests,stateDeck])\n\n  function updateTest(id:number, transform:(test:TestCase) => void)\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id)  transform(t); \n      return t;\n      }))\n  }\n  function updateSingleTest(id:number, transform:(test:SingleTest) => void)\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id && t instanceof SingleTest) transform(t); \n      return t;\n      }))\n  }\n  function updateGroupTest(id:number, transform:(test:GroupTest) => void)\n  {\n    setTests(tests => tests.map(t => {\n      if(t.id === id && t instanceof GroupTest) transform(t); \n      return t;\n      }))\n  }\n\n  const onChangeTestTurn = (id:number,turn:number) => updateSingleTest(id, t => t.turn = turn)\n  const onChangeSingleTarget = (id:number,target:string) => updateSingleTest(id, t => t.target = target)\n  const onChangeGroupName = (id:number,name:string) => updateGroupTest(id, t => t.name = name)\n  const onChangeGroupType = (id:number,group:GroupType) => updateGroupTest(id, t => t.groupType = group)\n  const onChangeSingleCompare = (id:number,compare:CompareType) => updateSingleTest(id,t => t.compare = compare)\n  const onChangeSingleAmount = (id:number,amount:number) => updateSingleTest(id, t => t.amount = amount)\n  const checkCanDrop = (draggedTestId:number,droppedOnTestId:number) => {\n    if(draggedTestId === droppedOnTestId) {\n      return false;\n    }\n\n    const draggedTest = stateTests.find(t => t.id === draggedTestId)\n    const droppedOnTest = stateTests.find(t => t.id === droppedOnTestId)\n    if(draggedTest instanceof TestCase && droppedOnTest instanceof TestCase)\n    {\n      if(draggedTest.parentId !== undefined && draggedTest.parentId === droppedOnTest.id) {\n        return false;\n      }\n\n      //If dragged and dropped are the only children of the same parent, we would create an identical group, so no need\n      if(draggedTest.parentId !== undefined && draggedTest.parentId === droppedOnTest.parentId) {\n        let parentTest = stateTests.find(t => t.id === draggedTest.parentId)\n        if(parentTest instanceof GroupTest && parentTest.getChildren.length === 2)\n          return false;\n      }\n\n      //if the dragged test is a Group, we need to check we don't drop him inside one of his children\n      if(draggedTest instanceof GroupTest)\n      {\n        const descendants = draggedTest.getAllDescendants(stateTests);\n        if(descendants.some(d => d.id === droppedOnTestId)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n  const onDragDrop = (draggedTestId:number,droppedOnTestId:number) => {\n    //Invalid drops are being dropped into the element immediatly above, which I believe is the first valid drop target\n    console.log(\"Handlers\",\"Dropped\",draggedTestId,\"into\",droppedOnTestId)\n    if(checkCanDrop(draggedTestId,droppedOnTestId) === false) {\n      console.log(\"Invalid drop\")\n      return;\n    }\n\n    // console.log(\"App.onDragDrop\",draggedTestId,droppedOnTestId)\n    const draggedTest = stateTests.find(t => t.id === draggedTestId)\n    const droppedOnTest = stateTests.find(t => t.id === droppedOnTestId)\n    if(draggedTest instanceof TestCase && droppedOnTest instanceof TestCase)\n    {\n      //In both scenarios, the dragged test has a new parent\n      if(draggedTest.parentId !== undefined) {\n        let draggedTestParent = stateTests.find(t => t.id === draggedTest.parentId)\n        if(draggedTestParent instanceof GroupTest) {\n          if(draggedTestParent.getChildren(stateTests).length === 1) { //If it was the only child, we remove the parent from the list\n            setTests(prevTests => prevTests.filter(t => t.id !== draggedTest.parentId))\n          } \n        }\n      }\n\n      //Case A: Drop Single/Group on Single => Create a group (with parent = droppedOn.parent), and set both single tests parent to the new group\n      if(droppedOnTest instanceof SingleTest)\n      {\n        const newGroup = new GroupTest(1 + Math.max(...stateTests.map(t => t.id)) )\n        \n        newGroup.parentId = droppedOnTest.parentId\n        setTests(prevTests => [...prevTests,newGroup])\n        updateTest(draggedTestId, t => t.parentId = newGroup.id)\n        updateTest(droppedOnTestId, t => t.parentId = newGroup.id)\n      }\n\n      //Case B: Drop Single/Group on Group => Set the parent for the dragged item to the dropped's ID\n      if(droppedOnTest instanceof GroupTest)\n      {\n        updateTest(draggedTestId, t => t.parentId = droppedOnTest.id)\n      }\n    }\n  }\n\n  const onTrashDrop = (id:number) => {\n    //deleting the whole thing if it's a group, there are arguments for deleting just the wrapper and ungrouping the children\n    const deletedTest = stateTests.find(t => t.id === id)\n    if(deletedTest instanceof SingleTest) {\n      setTests(prevTests => prevTests.filter(t => t.id !== deletedTest.id))\n    }\n    else if(deletedTest instanceof GroupTest) {\n      const allChildrenIDs = deletedTest.getAllDescendants(stateTests).map(t => t.id)\n      const allDeletedIDs = [deletedTest.id, ...allChildrenIDs]\n      setTests(prevTests => prevTests.filter(t => allDeletedIDs.includes(t.id) === false ))\n    }\n  }\n\n  const handlers = {\n    onChangeTestTurn:onChangeTestTurn,\n    onChangeSingleTarget:onChangeSingleTarget,\n    onChangeGroupName:onChangeGroupName,\n    onChangeGroupType:onChangeGroupType,\n    onChangeSingleCompare:onChangeSingleCompare,\n    onChangeSingleAmount:onChangeSingleAmount,\n    onDragDrop:onDragDrop,\n    checkCanDrop:checkCanDrop\n  }\n  function handleClickAdd() {\n    setTests(prevTests => [...prevTests, new SingleTest(1 + Math.max(0, ...prevTests.map(t => t.id)), \"\")])\n  }\n  function handleClickRun() {\n    runSim();\n  }\n  function handleSave() {\n    persistDeck(stateDeck)\n    persistTests(Tests2JSON(stateTests))\n    setSaved(true)\n  }\n\n  function getRootTests() {\n    return stateTests.filter(t => t.parentId == null)\n  }\n\n  function runSim() {\n    setRunning(true)\n    let newTests = TestCase.clone(stateTests)\n\n    let rootTests: Array<TestCase> = newTests.filter(t => t.parentId == null) \n    let deck = Card.parseText(stateDeck)\n    for (let i = 0; i < TOTAL_RUNS; i++) {\n      let shuffled = _.shuffle(deck);\n      rootTests.forEach(t => t.IsTrue(shuffled, newTests))\n    }\n\n    setTests(newTests)\n    setRunning(false)\n  }\n\n  //Handle the deck just as a big string for the app, and only parse it as a deck when we click run\n  //we can try and pre-fetch the card info in the background maybe?\n\n  //https://blog.axlight.com/posts/how-i-developed-react-hooks-for-web-workers/\n  //To run the sim as a background process\n\n  return (\n    <div className=\"App\" style={{ \"textAlign\": \"left\" }}>\n      <div className=\"header\" />\n      <div className=\"content\">\n        <div  id=\"deck\">\n          <div className=\"line\">\n          <button className=\"left fill run\" onClick={handleClickRun} disabled={running} >RUN</button>\n          <input type=\"number\" value={numOfRuns} onChange={e => setRuns(Number.parseInt(e.target.value))} />\n          <button className=\"right fill run\" onClick={handleClickRun} disabled={running} >times</button>\n          <div className=\"horizontalSpacer\" />\n          <button className=\"add\" onClick={handleClickAdd}>Add Condition</button>\n          </div>\n          \n          <em>Deck</em>\n          <textarea value={stateDeck} onChange={e => setDeck(e.target.value)} />\n          <div className=\"line\">\n            <button id=\"save\" disabled={saved} onClick={handleSave}>Save</button>\n             <DndProvider backend={Backend}>\n             <TrashcanComponent dropHandler={onTrashDrop} />\n             </DndProvider>\n          </div>\n        </div>\n        \n        <HandlersContext.Provider value={handlers}>\n        <DndProvider backend={Backend}>\n        <div id=\"tests\">\n          {getRootTests().sort((a,b) => a.id - b.id).map(t => <TestComponent key={t.id + \"_tst\"} test={t} allTests={stateTests} />)}\n        </div>\n        </DndProvider>\n        </HandlersContext.Provider>\n        \n      </div>\n      <div className=\"footer\" />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}